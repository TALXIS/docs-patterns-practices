{
	"Sync main branch and create a new branch for pipeline files": {
		"scope": "powershell",
		"prefix": "CFH01-sync-main-create-pipeline-branch",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║      CFH01: Sync main branch and create a new branch for introducing pipeline files    ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# After the pull request is merged, you need to sync your local main branch with the remote",
			"# to ensure it's up to date. Then, you'll create a new branch to introduce pipeline files",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Checkout the main branch and pull the latest changes from the remote",
			"git checkout main",
			"git pull origin main",
			"",
			"# Step 2: Create a new branch for introducing pipeline files",
			"git checkout -b \"${1:users/tomas.prokop/add-pipelines}\""
		]
	},
	"Create pipeline source files": {
		"scope": "powershell",
		"prefix": "CFH02-create-pipeline-files",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFH02: Create Azure DevOps pipeline source YAML files                ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# We will create two Azure DevOps pipeline files. One for building artifacts from the source,",
			"# and the second for deploying packages. These YAML definitions can be stored alongside your",
			"# code in the repository, synced to the remote repository and then used to create pipelines",
			"# using the Azure CLI.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create a 'pipelines' directory to store pipeline YAML files",
			"New-Item -ItemType Directory -Path \"pipelines\"",
			"",
			"# Step 2: Create files for the build and deployment pipelines",
			"\"# type CFH03 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"pipelines/build.yml\"",
			"\"# type CFH04 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"pipelines/deploy.yml\"",
			"",
			"# Step 3: Open the files in your editor to add the pipeline definitions (CFH03 and CFH04)",
			"#         Suggestions for conde snippets can be triggered by control + space",
			"code \"pipelines/build.yml\"",
			"code \"pipelines/deploy.yml\""
		]
	},
	"Build pipeline template": {
		"scope": "yaml",
		"prefix": "CFH03-build-pipeline-template",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║    CFH03: Template of a build pipeline template for building artifacts from source     ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"",
			"# Versioning the pipeline output with date and revision number",
			"name: 0.0.1\\$(Date:yyMM).\\$(Rev:r)",
			"",
			"# This pipeline does not trigger automatically (triggered manually or by another pipeline)",
			"trigger: none",
			"",
			"# Using the 'windows-latest' virtual machine image to run the pipeline",
			"pool:",
			"\tvmImage: 'windows-latest'",
			"",
			"# Defining the steps to be executed in this pipeline",
			"steps:",
			"",
			"# Step 1: Use the .NET CLI to publish the project in Release configuration",
			"- task: DotNetCoreCLI@2",
			"\tinputs:",
			"\t\tcommand: 'publish'",
			"\t\tpublishWebProjects: false",
			"\t\tprojects: 'src/Packages.Main/Packages.Main.csproj'",
			"\t\targuments: '--configuration Release'",
			"\t\tzipAfterPublish: false",
			"",
			"# Step 2: Copy the published .pdpkg.zip files to the staging directory",
			"- task: CopyFiles@2",
			"\tinputs:",
			"\t\tSourceFolder: '\\$(Build.Repository.LocalPath)\\src\\'",
			"\t\tContents: '**\\*.pdpkg.zip'",
			"\t\tTargetFolder: '\\$(build.artifactstagingdirectory)\\Packages'",
			"\t\tflattenFolders: true",
			"",
			"# Step 3: Publish the build artifacts (the .zip files) to the artifact staging directory",
			"- task: PublishBuildArtifacts@1",
			"\tinputs:",
			"\t\tPathtoPublish: '\\$(Build.ArtifactStagingDirectory)'",
			"\t\tArtifactName: 'drop'",
			"\t\tpublishLocation: 'Container'",
			""
		]
	},
	"Deployment pipeline template": {
		"scope": "yaml",
		"prefix": "CFH04-deployment-pipeline-template",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║     CFH04: Template of a deployment pipeline for deploying packages to environment     ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"",
			"# Versioning the pipeline output with date and revision number",
			"name: 0.0.1\\$(Date:yyMM).\\$(Rev:r)",
			"",
			"# This pipeline does not trigger automatically (triggered manually or by another pipeline)",
			"trigger: none",
			"",
			"# Using the 'windows-latest' virtual machine image to run the pipeline",
			"pool:",
			"\tvmImage: 'windows-latest'",
			"",
			"# Defining the steps to download artifacts and deploy the package",
			"steps:",
			"",
			"# Step 1: Download the build artifacts from a specific build pipeline",
			"- task: DownloadPipelineArtifact@2",
			"\tinputs:",
			"\t\tbuildType: 'specific'",
			"\t\tproject: 'PROJECT_ID_PLACEHOLDER' # Update with your project ID",
			"\t\tdefinition: 'BUILD_PIPELINE_ID_PLACEHOLDER' # Update with your build pipeline ID",
			"\t\tbuildVersionToDownload: 'latestFromBranch'",
			"\t\tbranchName: 'refs/heads/main'",
			"\t\titemPattern: 'drop/Packages/**.pdpkg.zip'",
			"\t\ttargetPath: '\\$(Pipeline.Workspace)'",
			"",
			"# Step 2: Install the Power Platform CLI tool if not already installed",
			"- task: PowerPlatformToolInstaller@2",
			"\tinputs:",
			"\t\tDefaultVersion: true",
			"",
			"# Step 3: Deploy the package to the specified Dataverse environment",
			"- task: PowerPlatformDeployPackage@2",
			"\tinputs:",
			"\t\tauthenticationType: 'PowerPlatformSPN'",
			"\t\tPowerPlatformSPN: 'InventoryManagementServiceConnection' # Update with your service principal name",
			"\t\tEnvironment: 'https://inventorymgmttest.crm4.dynamics.com' # Update with your environment URL",
			"\t\tPackageFile: '\\$(Pipeline.Workspace)/drop/Packages/Packages.Main.1.0.0.pdpkg.zip'",
			""
		]
	},
	"Create test pipeline": {
		"scope": "powershell",
		"prefix": "CFH05-test-pipline",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                CFH02: Create Azure DevOps UI test pipeline source YAML files           ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# We will create Azure DevOps pipeline file. This pipeline is used to run ui tests. These YAML definitions can be stored alongside your",
			"# code in the repository, synced to the remote repository and then used to create pipelines",
			"# using the Azure CLI.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create a 'pipelines' directory to store pipeline YAML files",
			"New-Item -ItemType Directory -Path \"pipelines\"",
			"",
			"# Step 2: Create files for the build and deployment pipelines",
			"\"# type runuitests and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"src/pipelines/Test.yml\"",
			"",
			"# Step 3: Open the files in your editor to add the pipeline definitions ",
			"#         Suggestions for conde snippets can be triggered by control + space",
			"code \"pipelines/Test.yml\"",
		]
	},
	"Run UI Tests Pipeline": {
		"scope": "yaml",
		"prefix": "CFH06-run-tests",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║    CFH06: YAML pipeline for restoring, building, and running UI tests in .NET Core     ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This YAML pipeline automates the process of running UI tests for a .NET Core application.",
			"# It is designed to be used in a CI/CD system like Azure DevOps or GitHub Actions.",
			"# The pipeline performs the following key tasks:",
			"#   1. Installs the .NET SDK to ensure the environment can build and test the application.",
			"#   2. Updates Google Chrome to the latest version for UI testing  with Selenium.",
			"#   3. Configures environment variables for test user credentials and runs the UI tests.",
			"#",
			"name: Run UI Tests",
			"",
			"trigger: none",
			"",
			"pool:",
			"  vmImage: 'windows-latest'",
			"",
			"steps:",
			"",
			"- task: UseDotNet@2",
			"  inputs:",
			"    packageType: 'sdk'",
			"    version: '8.x'",
			"  displayName: 'Install .NET 8 SDK'",
			"",
			"- task: PowerShell@2",
			"  displayName: 'Update Chrome'",
			"  inputs:",
			"    targetType: 'inline'",
			"    script: |",
			"      $chromeInstaller = \"chrome_installer.exe\"",
			"      Invoke-WebRequest -Uri \"https://dl.google.com/chrome/install/latest/chrome_installer.exe\" -OutFile $chromeInstaller",
			"      Start-Process -FilePath $chromeInstaller -ArgumentList \"/silent\", \"/install\" -NoNewWindow -Wait",
			"      Remove-Item -Path $chromeInstaller",
			"",
			"- task: PowerShell@2",
			"  displayName: 'Run UI tests'",
			"  inputs:",
			"    targetType: 'inline'",
			"    script: |",
			"      $env:Users__0__Username = '$(UserName)'",
			"      $env:Users__0__Password = '$(UserPassword)'",
			"      $env:Users__0__Alias = '$(UserAlias)'",
			"      $env:Users__0__OtpToken = '$(UserOtpToken)'",
			"",
			"      dotnet test"
		],
		"description": "YAML pipeline snippet for running UI tests with .NET Core"
	},
	"Create a pull request to integrate pipelines into the main branch": {
		"scope": "powershell",
		"prefix": "CFH07-create-pipelines-pull-request",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║         CFH07: Create a pull request to integrate pipelines into the main branch       ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Step 1: Add all the changes to the staging area",
			"git add --all",
			"",
			"# Step 2: Commit the changes with a descriptive message",
			"git commit -m \"${1:chore: created build and deployment pipeline YAML files}\"",
			"",
			"# Step 3: Push the changes to the remote repository",
			"git push -u origin --all",
			"",
			"# Step 4: Create a pull request in Azure DevOps using the Azure CLI and open it in a browser",
			"az repos pr create `",
			"--project \"\\$projectName\" `",
			"--repository \"\\$repositoryName\" `",
			"--source-branch \"${3:users/tomas.prokop/add-pipelines}\" `",
			"--target-branch \"${4:main}\" `",
			"--title \"${5:chore: add build and deployment pipelines}\" `",
			"--description \"${6:Initialization pipelines}\" `",
			"--open",
			"",
			"# Step 5: Approve and merge the pull request in the Azure DevOps UI",
			"",
			"# Step 6: Delete the branch locally and swith to the main branch and sync",
			"git branch -d \"${3:users/tomas.prokop/add-pipelines}\"",
			"git checkout main",
			"git pull origin main"
		]
	},
	"Create pipelines in Azure DevOps from the files": {
		"scope": "powershell",
		"prefix": "CFH08-create-pipelines-ado",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFH08: Create pipelines in Azure DevOps from the files               ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Once the pull request for the pipeline definitions has been merged into the main branch,",
			"# the next step is to create the pipelines in Azure DevOps. Azure Pipelines will read the",
			"# YAML definitions stored in your repository to configure build and deployment processes.",
			"#",
			"# You will use the Azure CLI to create these pipelines. The command references the YAML files",
			"# in the repository and configures the pipelines without running them immediately (skipping",
			"# the first run).",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the build pipeline.",
			"\\$buildPipelineCreateOutput = az pipelines create `",
			"--name \"${2:Build} Pipeline\" `",
			"--project \"\\$projectName\" `",
			"--repository \"\\$repositoryName\" `",
			"--repository-type tfsgit `",
			"--branch \"${5:main}\" `",
			"--yaml-path \"pipelines/build.yml\" `",
			"--skip-first-run",
			"",
			"\\$buildPipelineId = (\\$buildPipelineCreateOutput | ConvertFrom-Json).id",
			"",
			"# Step 2: Create the deployment pipeline.",
			"az pipelines create `",
			"--name \"${6:Deploy} Pipeline\" `",
			"--project \"\\$projectName\" `",
			"--repository \"\\$repositoryName\" `",
			"--repository-type tfsgit `",
			"--branch \"${5:main}\" `",
			"--yaml-path \"pipelines/deploy.yml\" `",
			"--skip-first-run",
			"# Step 3: Create the ui test pipeline.",
			"az pipelines create `",
			"--name \"Run test Pipeline\" `",
			"--project \"\\$projectName\" `",
			"--repository \"\\$repositoryName\" `",
			"--repository-type tfsgit `",
			"--branch \"${5:main}\" `",
			"--yaml-path \"pipelines/Test.yml\" `",
			"--skip-first-run"
		]
	},
	"Update project and build pipeline ID in the deploy pipeline YAML": {
		"scope": "powershell",
		"prefix": "CFH09-update-project-build-id",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFH09: Update project and build pipeline ID in deploy pipeline            ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# After the project and build pipeline were created, the pipeline YAML definitions should be",
			"# updated with the corresponding project ID and build pipeline ID.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create a new branch for updating the deploy pipeline",
			"git checkout -b \"${1:users/tomas.prokop/update-deploy-pipeline}\"",
			"",
			"# Step 2: Replace placeholders in the deploy pipeline YAML file with the actual project and build pipeline IDs.",
			"\\$deployPipelineFilePath = \"./pipelines/deploy.yml\"",
			"",
			"# Update the YAML file with the project ID",
			"(Get-Content \\$deployPipelineFilePath) -replace 'PROJECT_ID_PLACEHOLDER', \\$projectId | Set-Content \\$deployPipelineFilePath",
			"",
			"# Update the YAML file with the build pipeline ID",
			"(Get-Content \\$deployPipelineFilePath) -replace 'BUILD_PIPELINE_ID_PLACEHOLDER', \\$buildPipelineId | Set-Content \\$deployPipelineFilePath",
			"",
			"# Step 3: Commit and push the changes",
			"git add --all",
			"git commit -m \"chore: updated project and build pipeline IDs in deploy pipeline\"",
			"git push -u origin \"users/tomas.prokop/update-deploy-pipeline\"",
			"",
			"# Step 4: Create a pull request to integrate the changes into the main branch",
			"az repos pr create `",
			"--project \"\\$projectName\" `",
			"--repository \"\\$repositoryName\" `",
			"--source-branch \"${1:users/tomas.prokop/update-deploy-pipeline}\" `",
			"--target-branch \"${2:main}\" `",
			"--title \"${3:chore: update project and build pipeline IDs in deploy pipeline}\" `",
			"--description \"${4:Update the project and build pipeline IDs in the deploy pipeline YAML file.}\"`",
			"--open",
			"",
			"# Step 5: Approve and merge the pull request in the Azure DevOps UI",
			"",
			"# Step 6: Delete the branch locally and switch to the main branch",
			"git branch -d \"${1:users/tomas.prokop/update-deploy-pipeline}\"",
			"git checkout main",
			"git pull origin main"
		]
	},
	"Create a test environment": {
		"scope": "powershell",
		"prefix": "CFH10-create-test-environment",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                        CFH10: Create a test environment                               ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# A test environment (UAT) is used for testing your solutions before they are deployed ",
			"# to production.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create a new test environment.",
			"pac admin create `",
			"--name \"${1:Shift Planner Test Environment}\" `",
			"--currency ${2:EUR} `",
			"--region ${3:europe} `",
			"--type ${4:Sandbox} `",
			"--domain ${5:inventorymgmttest}",
			"",
			"# Step 2: Authenticate and connect to the test environment.",
			"pac auth clear",
			"pac auth create --environment \"https://inventorymgmttest.crm4.dynamics.com/\""
		]
	},
	"Create app registration and service connection in Azure DevOps": {
		"scope": "powershell",
		"prefix": "CFH11-create-service-connection",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║           CFH11: Create app registration and service connection in Azure DevOps       ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Workload identity federation allows Azure DevOps to authenticate against Azure services",
			"# without the need for long-lived credentials. A trust is established between Azure DevOps",
			"# and an Azure service principal and Azure DevOps provides short-lived tokens for Azure API.",
			"#",
			"# This snippet creates a service principal and configures a service connection in Azure DevOps",
			"# that the pipeline tasks can use to authenticate against Dataverse.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Set variables",
			"\\$projectInfo = az devops project show --project \"\\$projectName\" --query \"{id: id, name: name}\" --output json | ConvertFrom-Json",
			"\\$projectId = \\$projectInfo.id",
			"\\$projectName = \\$projectInfo.name",
			"\\$tenantId = az account show --query \"tenantId\" --output tsv",
			"",
			"# Step 2: Create a service principal for Dataverse.",
			"\\$pacServicePrincipalOutput = pac admin create-service-principal",
			"\\$appRegistrationId = (\\$pacServicePrincipalOutput -split \"\n\" | Where-Object {\\$_ -match \"Application Id\"}) -replace \"Application Id\\s+\", \"\"",
			"Write-Host \"Application Id: \" -ForegroundColor Yellow",
			"Write-Host \\$appRegistrationId -ForegroundColor Green",
			"",
			"# Step 3: Set up workload identity federation in Entra ID.",
			"\\$federatedCredentialObject = @\"",
			"{",
			"    \"name\": \"ADOTest\",",
			"    \"issuer\": \"https://vstoken.dev.azure.com/2efd1716-20ec-43ed-a8a0-3eb01a9e236e\",",
			"    \"subject\": \"sc://thenetworg/DemoInventoryManagement/InventoryManagementServiceConnection\",",
			"    \"description\": \"Azure DevOps Service Connection\",",
			"    \"audiences\": [",
			"        \"api://AzureADTokenExchange\"",
			"    ]",
			"}",
			"\"@",
			"",
			"az ad app federated-credential create --id \\$appRegistrationId --parameters \"\\$federatedCredentialObject\"",
			"",
			"# Step 4: Open the application in the browser to manage credentials.",
			"\\$appRegistrationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Credentials/appId/\\$appRegistrationId/isMSAApp~/false\"",
			"Start-Process \\$appRegistrationUrl",
			"",
			"# Step 5: Create a service connection in Azure DevOps",
			"\\$serviceEndpointTempFilePath = \"./serviceConnectionTemp.json\"",
			"\\$serviceEndpointObject = @\"",
			"{",
			"    \"authorization\": {",
			"        \"parameters\": {",
			"            \"serviceprincipalid\": \"\\$appRegistrationId\",",
			"            \"tenantid\": \"\\$tenantId\"",
			"        },",
			"        \"scheme\": \"WorkloadIdentityFederation\"",
			"    },",
			"    \"name\": \"InventoryManagementServiceConnection\",",
			"    \"owner\": \"library\",",
			"    \"type\": \"powerplatform-spn\",",
			"    \"url\": \"https://inventorymgmttest.crm4.dynamics.com\",",
			"    \"serviceEndpointProjectReferences\": [",
			"        {",
			"            \"name\": \"InventoryManagementServiceConnection\",",
			"            \"projectReference\": {",
			"                \"id\": \"\\$projectId\",",
			"                \"name\": \"\\$projectName\"",
			"            }",
			"        }",
			"    ]",
			"}",
			"\"@",
			"",
			"\\$serviceEndpointObject | Out-File -FilePath \\$serviceEndpointTempFilePath -Encoding utf8",
			"az devops service-endpoint create --service-endpoint-configuration \\$serviceEndpointTempFilePath --project \"\\$projectName\"",
			"Remove-Item \\$serviceEndpointTempFilePath",
			"",
			"# Step 6: Grant access to all pipelines for the service connection",
			"\\$serviceEndpointId = az devops service-endpoint list --query \"[?name=='InventoryManagementServiceConnection'].id\" -o tsv --project \"\\$projectName\"",
			"az devops service-endpoint update --id \\$serviceEndpointId --enable-for-all --project \"\\$projectName\"",
			"",
			"# Step 7: Open the Azure DevOps project in the browser",
			"az devops project show --project \"\\$projectName\" --open"
		]
	},
	"Run and open pipelines in the browser": {
		"scope": "powershell",
		"prefix": "CFH12-run-and-open-pipelines",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                     CFH12: Run and open pipelines in the browser                      ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# After creating your pipelines in Azure DevOps, you can run them using the Azure CLI",
			"# and monitor their status by opening the pipeline pages in the browser.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Run the build pipeline",
			"az pipelines run --name \"Build Pipeline\" --project \"\\$projectName\"",
			"",
			"# Step 2: Open the build pipeline in the browser",
			"az pipelines show --name \"Build Pipeline\" --project \"\\$projectName\" --open",
			"",
			"# Step 3: Run the deployment pipeline (wait for the build pipeline to finish first!)",
			"az pipelines run --project \"\\$projectName\" --name \"Deploy Pipeline\"",
			"",
			"# Step 4: Open the deployment pipeline in the browser",
			"az pipelines show --project \"\\$projectName\" --name \"Deploy Pipeline\" --open",
			"",
			"# Step 5: Open the Power Apps Maker in the web browser and check if the solutions were deployed",
			"pac tool maker"
		]
	}
}