{
	"Create a Dataverse solution project for a database schema": {
		"scope": "powershell",
		"prefix": "CFC01-create-model-solution",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                CFC01: Create a Dataverse solution project for a database schema        ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# We will use the .NET templating engine (dotnet new) to create a Dataverse solution project.",
			"# The .NET templating engine is a system that allows us to define project templates",
			"#",
			"# Unlike the Power Platform CLI, which generates projects that require post-processing to be ",
			"# compatible with .NET project system, this template from the TALXIS.DevKit.Templates.Dataverse",
			"# package resolves those issues.",
			"#",
			"# You can check out how the templates are built and used:",
			"# https://github.com/TALXIS/tools-devkit-templates",
			"#",
			"# Templates automatically add new projects to the .sln file.",
			"# If you wanted to do it manually you would use the following command:",
			"# dotnet sln add src/Solutions.DataModel",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Install the TALXIS.DevKit.Templates.Dataverse NuGet package, which contains",
			"#         templates for creating common Power Platform components.",
			" dotnet new install TALXIS.DevKit.Templates.Dataverse",
			"",
			"# Step 2: Create a solution project for the database schema using the installed template.",
			"dotnet new pp-solution `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--PublisherName \"${2:tomas}\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--allow-scripts yes",
			"",
			"# Step 3: Add the solution project to the Package Deployer project as a .NET ProjectReference item.",
			"pac package add-reference --path ../Solutions.DataModel/",
		]
	},
	"Create database tables in the model solution": {
		"scope": "powershell",
		"prefix": "CFC02-create-tables",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                  CFC02: Create new tables in Dataverse model solution                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# We will create new tables in the Dataverse solution for tracking items and transactions.",
			"# Dataverse supports multiple table types and in this case, we are adding a Standard table.",
			"#",
			"# There is a difference between adding all table metadata to a solution and adding a table",
			"# reference to a solution. The reference allows adding columns, views, forms, and ribbon buttons.",
			"# This is controlled by the --Behavior argument, which can be set to either 'New' or 'Existing'.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add Warehouse Item table to the solution",
			"dotnet new pp-entity `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--EntityType \"${2:Standard}\" `",
			"--Behavior \"${3:New}\" `",
			"--PublisherPrefix \"${4:tom}\" `",
			"--LogicalName \"${5:warehouseitem}\" `",
			"--LogicalNamePlural \"${6:warehouseitems}\" `",
			"--DisplayName \"${7:Warehouse Item}\" `",
			"--DisplayNamePlural \"${8:Warehouse Items}\" `",
			"--SolutionRootPath \"${9:Declarations}\" `",
			"--allow-scripts yes",
			"# Step 1: Add Warehouse Transaction table to the solution",
			"dotnet new pp-entity `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--EntityType \"${2:Standard}\" `",
			"--Behavior \"${3:New}\" `",
			"--PublisherPrefix \"${4:tom}\" `",
			"--LogicalName \"warehousetransaction\" `",
			"--LogicalNamePlural \"warehousetransactions\" `",
			"--DisplayName \"Warehouse Transaction\" `",
			"--DisplayNamePlural \"Warehouse Transactions\" `",
			"--SolutionRootPath \"${9:Declarations}\" `",
			"--allow-scripts yes",
		]
	},
	"Add attributes to the tables in the model solution": {
		"scope": "powershell",
		"prefix": "CFC03-add-attributes",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFC03: Add columns to the previously created tables                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# In Dataverse, tables are made up of columns.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add Available Quantity column to the Warehouse Item table",
			"dotnet new pp-entity-attribute `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--EntitySchemaName \"${2:tom_warehouseitem}\" `",
			"--AttributeType \"${3:WholeNumber}\" `",
			"--RequiredLevel \"${4:required}\" `",
			"--PublisherPrefix \"${5:tom}\" `",
			"--LogicalName \"${6:availablequantity}\" `",
			"--DisplayName \"${7:Available Quantity}\" `",
			"--SolutionRootPath \"${8:Declarations}\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add Item column to the Warehouse transaction table",
			"dotnet new pp-entity-attribute `",
			"--output \"src\\Solutions.DataModel\" `",
			"--EntitySchemaName \"tom_warehousetransaction\" `",
			"--AttributeType \"Lookup\" `",
			"--RequiredLevel \"required\" `",
			"--PublisherPrefix \"tom\" `",
			"--LogicalName \"itemid\" `",
			"--DisplayName \"Item\" `",
			"--ReferencedEntityName \"tom_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Step 3: Add Quantity column to the Warehouse transaction table",
			"dotnet new pp-entity-attribute `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--EntitySchemaName \"tom_warehousetransaction\" `",
			"--AttributeType \"${3:WholeNumber}\" `",
			"--RequiredLevel \"${4:required}\" `",
			"--PublisherPrefix \"${5:tom}\" `",
			"--LogicalName \"quantity\" `",
			"--DisplayName \"Quantity\" `",
			"--SolutionRootPath \"${8:Declarations}\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Build solution.zip files which can be imported": {
		"scope": "powershell",
		"prefix": "CFB12-build-solutions",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFB12: Build solution.zip files which can be imported                ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Dataverse solutions come in two forms: unmanaged and managed.",
			"#",
			"# Unmanaged solutions are for development and act as containers for tracking components.",
			"# When deleted, components remain in the system. Use them to export definitions from your",
			"# environment to source control.",
			"#",
			"# Managed solutions are for deployments. They layer component definitions, support merging",
			"# of some components (diffs) and can be uninstalled if there are no dependencies. Import",
			"# order is important. 'Managed properties' can restrict modifications to components.",
			"#",
			"# Production environments should not contain unmanaged components and unmanaged customizations",
			"# should not be made in the Active layer.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                      Solution Building",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Import unmanaged solutions into developer environments for modifications with web tools. You",
			"# need managed solutions to create layers and track diffs for syncing to source control.",
			"#",
			"# To build both types, set `<Managed>2</Managed>` in Solution.xml. The Solution Package Tool",
			"# (SPT) can then pack both types from source. Microsoft.PowerApps.MSBuild.Solution NuGet",
			"# triggers SPT when running the `Build` target (e.g., 'dotnet build').",
			"#",
			"# For PDPackage projects, use the `Publish` target to generate deployment packages.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#",
			"cd ./src/Solutions.DataModel",
			"dotnet build --configuration Release",
			"cd ../../",
			"",
			"cd ./src/Solutions.UI",
			"dotnet build --configuration Release",
			"cd ../../",
			"",
			"cd ./src/Solutions.Security",
			"dotnet build --configuration Release",
			"cd ../../",
			"",
			"cd ./src/Solutions.Logic",
			"dotnet build --configuration Release",
			"cd ../../",
			"",
			"dotnet publish --configuration Release"
		]
	}
}
