{
	"Create database schema and a new Canvas app": {
		"scope": "powershell",
		"prefix": "CFG01-create-schema-and-canvas-app",
		"body": [
			"# CFG01",
			"# 1. open the empty App solution you imported",
			"# 2. create a new Canvas app called 'Shift Planner' Canvas App",
			"",
			"# 3. add a data table to a screen with 'Shift Event' table as data source",
			"# 4. include Subject, Actual Start and Actual End columns",
			"# 5. add a button which will create new records using the following formula:",
			"With(",
			"\t{",
			"\t\tStart: ",
			"\t\t\tDateAdd(",
			"\t\t\t\tDateAdd(",
			"\t\t\t\t\tToday(),",
			"\t\t\t\t\tRandBetween(0, 4) - Weekday(Today(), StartOfWeek.Monday) + 1,",
			"\t\t\t\t\tTimeUnit.Days",
			"\t\t\t\t),",
			"\t\t\t\tRandBetween(9 * 60, 17 * 60 - 60),",
			"\t\t\t\tTimeUnit.Minutes",
			"\t\t\t)",
			"\t},",
			"\tPatch('Shift Events',",
			"\tDefaults('Shift Events'),",
			"\t{",
			"\t\tSubject: Concatenate(\"Shift \", RandBetween(0, 30)),",
			"\t\t'Actual Start': Start,",
			"\t\t'Actual End': DateAdd(Start, 1, TimeUnit.Hours)",
			"\t})",
			");",
			"",
			"# 6. Generate few records"
		]
	},
	"Create fields for model driven app": {
		"scope": "powershell",
		"prefix": "CFG02-сreating-fields-in-dataverse",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║           Instruction: Creating Fields in Dataverse via make.powerapps.com             ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# 1. Authentication and Environment Selection:",
			"#    - Open your browser and go to: https://make.powerapps.com",
			"#    - Sign in with your Microsoft account credentials.",
			"#    - In the upper right corner, select the desired Environment.",
			"#",
			"# 2. Creating the 'Available Quantity' field in the 'tom_warehouseitem' table:",
			"#    a. Open the solutions section and select SolutionUI in it",
			"#    b. Find and open the table named 'tom_warehouseitem'.",
			"#    c. Navigate to the 'Columns' tab.",
			"#    d. Click '+ New column'.",
			"#    e. Fill in the following details:",
			"#         • Display Name: 'Available Quantity'",
			"#         • Name (Logical Name): 'availablequantity'",
			"#         • Data Type: Whole Number (Integer)",
			"#         • Required: check if the field is mandatory",
			"#    f. Click 'Save' to create the column.",
			"#",
			"# 3. Creating the 'Item' field in the 'tom_warehousetransaction' table:",
			"#    a. Open the solutions section and select SolutionUI in it",
			"#    b. Find and open the table named 'tom_warehousetransaction'.",
			"#    c. Navigate to the 'Columns' tab.",
			"#    d. Click '+ New column'.",
			"#    e. Enter the following information:",
			"#         • Display Name: 'Item'",
			"#         • Name (Logical Name): 'itemid'",
			"#         • Data Type: Lookup",
			"#         • Lookup Reference: select 'tom_warehouseitem'",
			"#         • Required: check if the field is mandatory",
			"#    f. Click 'Save' to create the column.",
			"#",
			"# 4. Finally:",
			"#    - Ensure all changes are saved.",
			"#"
		],
		"description": "Snippet providing detailed instructions for creating 'Available Quantity' and 'Item' fields via make.powerapps.com."
	},
	"Synchronize the changes from live environment back to your repository": {
		"scope": "powershell",
		"prefix": "CFG02-sync-changes-to-repo",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║      CFG02: Synchronize the changes from live environment back to your repository      ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# After making changes directly in your Dataverse environment, you can sync those changes",
			"# back to your source control. This can be done either by exporting the solution to a separate",
			"# folder or by using the CLI to sync the changes directly into your solution project.",
			"#",
			"# This must be done for individual solutions, as each solution is managed separately.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Publish all customizations in the environment",
			"pac solution publish",
			"",
			"# Step 2: Sync changes from the UI solution",
			"cd \"./src/Solutions.UI/\"",
			"pac solution sync --packagetype Both --solution-folder Declarations --processCanvasApps",
			"cd ../..",
			"",
			"# Step 3: Sync changes from the Data Model solution",
			"cd \"./src/Solutions.DataModel/\"",
			"pac solution sync --packagetype Both --solution-folder Declarations",
			"cd ../.."
		]
	},
	"Export data and add them to the package": {
		"scope": "powershell",
		"prefix": "CFG03-export-data-and-add-to-package",
		"body": [
			"# CFG03",
			"# Export data from the live environment and add them to the package",
			"mkdir \"src/Packages.Main/Data\"",
			"cd \"src/Packages.Main\"",
			"",
			"pac tool cmt",
			"",
			"pac data export --schemaFile \"Data\\schema.xml\" --dataFile \"Data\\data.zip\"",
			"",
			"# Unzip data.zip",
			"Expand-Archive \"Data\\data.zip\" -DestinationPath Data",
			"",
			"# Remove extra files",
			"Remove-Item \"Data\\``[Content_Types``].xml\", \"Data\\data.zip\", \"Data\\schema.xml\" -ErrorAction SilentlyContinue",
			"",
			"# Add data.zip to ImportConfig.xml",
			"",
			"# Change data and ZIP it again (can be replaced with a build task)",
			"Compress-Archive -Path \"Data\\*.xml\" -Update -DestinationPath \"Data\\data.zip\"",
			"",
			"# Import the data back (you can use the folder name without need for the zip file)",
			"pac data import --data \"Data\"",
			"",
			"cd ../..",
			"",
			"",
			"",
			"# Alternatively you can use the a MSBuild target to automate the process during package build",
			"# <Target Name=\"ZipDataPackage\" AfterTargets=\"CopyManagedSolutionsFromBuildToPackageOutput\" Condition=\"Exists('$(DefaultDataPackageFolder)')\">",
			"#     <MakeDir Directories=\"$(OutputPkgFolder)\" />",
			"#     <ZipDirectory SourceDirectory=\"$(DefaultDataPackageFolder)\" DestinationFile=\"$(OutputPkgFolder)DefaultDataPackage.zip\" Overwrite=\"true\" />",
			"# </Target>"
		]
	},
	"Commit the changes": {
		"scope": "powershell",
		"prefix": "CFG04-commit-changes",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                       CFG04: Commit the changes to your local repository              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Step 1: Add all the changes to the staging area",
			"git add --all",
			"",
			"# Step 2: Commit the changes with a descriptive message.",
			"git commit -m \"${1:feat: created new warehouse table and new Model-Driven app}\"",
			"",
			"# Step 3: Push the changes to the remote repository",
			"git push"
		]
	},
	"Create a pull request to integrate changes into the main branch": {
		"scope": "powershell",
		"prefix": "CFG05-create-pull-request",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║           CFG05: Create a pull request to integrate changes into the main branch       ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# A pull request (PR) is a method for submitting contributions to a repository. Once you've",
			"# committed your changes locally and pushed them to a branch in the remote repository, the",
			"# next step is to create a pull request to propose merging your changes into the main branch.",
			"#",
			"# Pull requests allow for code review, discussion, and testing before the changes are",
			"# integrated into the main branch. It ensures that the codebase stays clean and stable.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"",
			"# Step 1: Create a pull request in Azure DevOps using the Azure CLI and open it in a browser",
			"az repos pr create `",
			"--project \"\\$projectName\" `",
			"--repository \"\\$repositoryName\" `",
			"--source-branch \"${3:users/tomas.prokop/project-setup}\" `",
			"--target-branch \"${4:main}\" `",
			"--title \"${5:feat: add new tables app and database}\" `",
			"--description \"${6:Initialization of the app}\" `",
			"--open",
			"",
			"# Step 2: Approve and merge the pull request in the Azure DevOps UI"
		]
	}
}