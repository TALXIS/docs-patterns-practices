{
    "Create a Dataverse solution project for a database schema": {
		"scope": "powershell",
		"prefix": "CFB01-create-model-solution",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                CFB01: Create a Dataverse solution project for a database schema        ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# We will use the .NET templating engine (dotnet new) to create a Dataverse solution project.",
			"# The .NET templating engine is a system that allows us to define project templates",
			"#",
			"# Unlike the Power Platform CLI, which generates projects that require post-processing to be ",
			"# compatible with .NET project system, this template from the TALXIS.DevKit.Templates.Dataverse",
			"# package resolves those issues.",
			"#",
			"# You can check out how the templates are built and used:",
			"# https://github.com/TALXIS/tools-devkit-templates",
			"#",
			"# Templates automatically add new projects to the .sln file.",
			"# If you wanted to do it manually you would use the following command:",
			"# dotnet sln add src/Solutions.DataModel",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Install the TALXIS.DevKit.Templates.Dataverse NuGet package, which contains",
			"#         templates for creating common Power Platform components.",
			" dotnet new install TALXIS.DevKit.Templates.Dataverse",
			"",
			"# Step 2: Create a solution project for the database schema using the installed template.",
			"dotnet new pp-solution `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--PublisherName \"${2:tomas}\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--allow-scripts yes",
			"dotnet sln add src/Solutions.DataModel"
		]
	},
	"Create database tables in the model solution": {
		"scope": "powershell",
		"prefix": "CFB02-create-tables",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                  CFB02: Create new tables in Dataverse model solution                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# We will create new tables in the Dataverse solution for tracking items and transactions.",
			"# Dataverse supports multiple table types and in this case, we are adding a Standard table.",
			"#",
			"# There is a difference between adding all table metadata to a solution and adding a table",
			"# reference to a solution. The reference allows adding columns, views, forms, and ribbon buttons.",
			"# This is controlled by the --Behavior argument, which can be set to either 'New' or 'Existing'.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add Warehouse Item table to the solution",
			"dotnet new pp-entity `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--EntityType \"${2:Standard}\" `",
			"--Behavior \"${3:New}\" `",
			"--PublisherPrefix \"${4:tom}\" `",
			"--LogicalName \"${5:warehouseitem}\" `",
			"--LogicalNamePlural \"${6:warehouseitems}\" `",
			"--DisplayName \"${7:Warehouse Item}\" `",
			"--DisplayNamePlural \"${8:Warehouse Items}\" `",
			"--SolutionRootPath \"${9:Declarations}\" `",
			"--allow-scripts yes",

			"# Step 1: Add Warehouse Transaction table to the solution",
			"dotnet new pp-entity `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--EntityType \"${2:Standard}\" `",
			"--Behavior \"${3:New}\" `",
			"--PublisherPrefix \"${4:tom}\" `",
			"--LogicalName \"warehousetransaction\" `",
			"--LogicalNamePlural \"warehousetransactions\" `",
			"--DisplayName \"Warehouse Transaction\" `",
			"--DisplayNamePlural \"Warehouse Transactions\" `",
			"--SolutionRootPath \"${9:Declarations}\" `",
			"--allow-scripts yes",
		]
	},
	"Add attributes to the tables in the model solution": {
		"scope": "powershell",
		"prefix": "CFB03-add-attributes",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFB03: Add columns to the previously created tables                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# In Dataverse, tables are made up of columns.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add Available Quantity column to the Warehouse Item table",
			"dotnet new pp-entity-attribute `",
			"--output \"src/${1:Solutions.DataModel}\" `",
			"--EntitySchemaName \"${2:tom_warehouseitem}\" `",
			"--AttributeType \"${3:WholeNumber}\" `",
			"--RequiredLevel \"${4:required}\" `",
			"--PublisherPrefix \"${5:tom}\" `",
			"--LogicalName \"${6:availablequantity}\" `",
			"--DisplayName \"${7:Available Quantity}\" `",
			"--SolutionRootPath \"${8:Declarations}\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add Item column to the Warehouse transaction table",
			"dotnet new pp-entity-attribute `",
			"--output \"src\\Solutions.DataModel\" `",
			"--EntitySchemaName \"tom_warehousetransaction\" `",
			"--AttributeType \"Lookup\" `",
			"--RequiredLevel \"required\" `",
			"--PublisherPrefix \"tom\" `",
			"--LogicalName \"itemid\" `",
			"--DisplayName \"Item\" `",
			"--ReferencedEntityName \"tom_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes"
		]
	},
	"Initialize a Dataverse solution project for a UI layer": {
		"scope": "powershell",
		"prefix": "CFB04-create-ui-solution",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║             CFB04: Initialize a Dataverse solution project for the UI layer            ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# The presentation (UI) layer refers to the user interface components like forms, views,",
			"# pages, controls, scripts and command buttons which allow users to interact your app.",
			"# Separating the database schema and backend business logic from the frontend provides",
			"# flexibility in the solution architecture, easier change implementation and troubleshooting.",
			"#",
			"# In Dataverse, you can use the model-driven approach to easily create apps by generating",
			"# forms and views for CRUD (Create, Read, Update, Delete) operations over tables. These",
			"# frontend components are created within table definitions.",
			"#",
			"# The solution framework in Dataverse supports multiple solution layers contributing components",
			"# to the same table (formerly called entities). By separating the UI into its own solution,",
			"# you can uninstall it when necessary without losing data stored in the database.",
			"#",
			"# Default forms and views are created automatically with each table, but cannot be removed later.",
			"# Therefore, it's better to define custom forms and views in a separate UI project.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create a new solution project for the presentation (UI) layer using a template.",
			"dotnet new pp-solution `",
			"--output \"${1:src/Solutions.UI}\" `",
			"--PublisherName \"${2:tomas}\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add the existing tables initialized in the data model project to the UI solution.",
			"dotnet new pp-entity `",
			"--output \"${1:src/Solutions.UI}\" `",
			"--Behavior \"Existing\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--LogicalName \"${4:warehouseitem}\" `",
			"--DisplayName \"${5:Warehouse Item}\" `",
			"--SolutionRootPath \"${6:Declarations}\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-entity `",
			"--output \"${1:src/Solutions.UI}\" `",
			"--Behavior \"Existing\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--LogicalName \"warehousetransaction\" `",
			"--DisplayName \"Warehouse Transaction\" `",
			"--SolutionRootPath \"${6:Declarations}\" `",
			"--allow-scripts yes",
			"",
			"# Step 3: Create model driven app for the UI solution.",
			"dotnet new pp-app-model `",
			"--output \"${1:src/Solutions.UI}\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--LogicalName \"WarehouseApp\" `",
			"--SolutionRootPath \"${6:Declarations}\" `",
			"--allow-scripts yes",
			"dotnet sln add src/Solutions.UI",
			"",
			"# Step 4: Define App Module Components ",
			"dotnet new pp-app-model-component `",
			"--output \"${1:src/Solutions.UI}\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--EntityLogicalName \"warehouseitem\" `",
			"--SolutionRootPath \"${6:Declarations}\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-app-model-component `",
			"--output \"${1:src/Solutions.UI}\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--EntityLogicalName \"warehousetransaction\" `",
			"--SolutionRootPath \"${6:Declarations}\" `",
			"--allow-scripts yes",
			"",
			"# Step 5: Add Areas to setemaps",
			"dotnet new pp-sitemap-area `",
			"--output \"${1:src/Solutions.UI}\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--EntityLogicalName \"warehouseitem\" `",
			"--AreaTitle \"Warehouse Item\" `",
			"--SolutionRootPath \"${6:Declarations}\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-sitemap-area `",
			"--output \"${1:src/Solutions.UI}\" `",
			"--PublisherPrefix \"${3:tom}\" `",
			"--EntityLogicalName \"warehousetransaction\" `",
			"--AreaTitle \"Warehouse Transaction\" `",
			"--SolutionRootPath \"${6:Declarations}\" `",
			"--allow-scripts yes",
			"",
			"# Step 6: Create new forms",
			"$$tom_warehouseitemFormGuid = [guid]::NewGuid()",
			"$$tom_warehousetransactionFormGuid = [guid]::NewGuid()",
			"",
			"dotnet new pp-entity-form  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\" `",
			"--SolutionRootPath \"Declarations\"  `",
			"--ItemFolderName \"tom_warehouseitem\"  `",
			"--MainFormId $$tom_warehouseitemFormGuid  `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-entity-form  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\" `",
			"--SolutionRootPath \"Declarations\"  `",
			"--ItemFolderName \"tom_warehousetransaction\"  `",
			"--MainFormId $$tom_warehousetransactionFormGuid  `",
			"--allow-scripts yes",
			"",
			"# Step 7: Add new row to previously created forms",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--AttributeType \"WholeNumber\"  `",
			"--PublisherPrefix \"tom\"  `",
			"--LogicalName \"availablequantity\"  `",
			"--FormType \"main\"  `",
			"--DisplayName \"Available Quantity\"  `",
			"--FormGUIDId $$tom_warehouseitemFormGuid `",
			"--EntityName \"tom_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\"`",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--AttributeType \"Lookup\"  `",
			"--PublisherPrefix \"tom\"  `",
			"--LogicalName \"itemid\"  `",
			"--FormType \"main\"  `",
			"--DisplayName \"Item\"  `",
			"--FormGUIDId $$tom_warehousetransactionFormGuid `",
			"--EntityName \"tom_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\"`",
			"--allow-scripts yes",
		]
	},
	"Create a full security role definition in Dataverse": {
		"scope": "powershell",
		"prefix": "CFB05-create-security-role-full",
		"body": [
		  "#",
		  "# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
		  "# ║                 CFB05: Create full security role definition for Dataverse              ║",
		  "# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
		  "#",
		  "# This snippet creates a full structure for defining security roles in Dataverse.",
		  "# It includes project initialization, role creation, and privilege assignment.",
		  "#",
		  "# ──────────────────────────────────────────────────────────────────────────────────────────",
		  "# Step 1: Create a new solution project dedicated to security roles.",
		  "dotnet new pp-solution `",
		  "--output \"src/${1:Solutions.Security}\" `",
		  "-P \"${2:tomas}\" `",
		  "-Pu \"${3:tom}\" `",
		  "--allow-scripts yes",
		  "",
		  "# ──────────────────────────────────────────────────────────────────────────────────────────",
		  "# Step 2: Create the security roles inside that solution.",
		  "",
		  "$$WarehouseWorkerId = [guid]::NewGuid()",
		  "",
		  "dotnet new pp-security-role `",
		  "--SolutionRootPath \"src/${1:Solutions.Security}/Declarations\" `",
		  "--rolename \"${4:warehouse worker}\" `",
		  "--roleid $$WarehouseWorkerId `" ,
		  "--allow-scripts yes",
		  "",
		  "$$WarehouseManagerGuidId = [guid]::NewGuid()",
		  "",
		  "dotnet new pp-security-role `",
		  "--SolutionRootPath \"src/${1:Solutions.Security}/Declarations\" `",
		  "--rolename \"warehouse manager\" `",
		  "--roleid $$WarehouseManagerGuidId `" ,
		  "--allow-scripts yes",
		  "",
		  "# ──────────────────────────────────────────────────────────────────────────────────────────",
		  "# Step 3: Assign entity privileges to the roles.",
		  "# Supported PrivilegeTypes: Create, Read, Write, Delete, Append, AppendTo, Assign, Share",
		  "# Supported Levels: None, User, BusinessUnit, ParentChildBusinessUnit, Global",
		  "#",
		  "# Example below assigns Global Read and User Write to entityName:",
		  "#",
		  "dotnet new pp-security-role-privilege `",
		  "--SolutionRootPath \"src/${1:Solutions.Security}/Declarations\" `",
		  "--rolename \"${4:warehouse worker}\" `",
		  "--PrivilegeTypeAndLevel \"[{ PrivilegeType: Read, Level: Global }, { PrivilegeType: Write, Level: User }]\" `",
		  "--entityname \"${6:warehouseitem}\" `",
		  "--allow-scripts yes",
		  "#",
		  "dotnet new pp-security-role-privilege `",
		  "--SolutionRootPath \"src/${1:Solutions.Security}/Declarations\" `",
		  "--rolename \"warehouse manager\" `",
		  "--PrivilegeTypeAndLevel \"[{ PrivilegeType: Read, Level: Global }, { PrivilegeType: Write, Level: Global }]\" `",
		  "--entityname \"${6:warehouseitem}\" `",
		  "--allow-scripts yes"
		]
	  },
    "Create a Dataverse package and add the solutions to it": {
		"scope": "powershell",
		"prefix": "CFB06-create-pdpackage",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                CFB06: Create a Dataverse Package and add solutions to it               ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# A Package Deployer Tool (PDT) package (PDPackage) in Dataverse is an artifact that allows ",
			"# you to bundle multiple Dataverse solutions, an ImportConfig.xml file, and custom .NET code ",
			"# to handle various stages of solution import. The package is used with the Package Deployer ",
			"# Tool to deploy multiple solutions with custom logic during deployment, such as data migrations, ",
			"# validations or post-deployment operations.",
			"#",
			"# The ImportConfig.xml file defines the order in which solutions are imported. It can also",
			"# contain how solution upgrade shoud be handled and execute import of configuration or test",
			"# data packages exported from environments with Configuration Migration Tool (CMT).",
			"#",
			"# The ImportConfig.xml can be automatically generated from the ProjectReferences ",
			"# of the PDPackage's .NET project using build targets. This ensures that the import process ",
			"# respects the correct dependencies.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the Dataverse package for deployment.",
			"pac package init --package-name ${1:Packages.Main} --outputDirectory \"src/${1:Packages.Main}\"",
			"cd \"src/${1:Packages.Main}\"",
			"",
			"# Step 2: Add Dataverse solutions to the package as .NET ProjectReference items.",
			"pac package add-reference --path ../Solutions.DataModel/",
			"pac package add-reference --path ../Solutions.UI/",
			"pac package add-reference --path ../Solutions.Security/",
			"",
			"# Step 3: Add the package project to the Visual Studio solution file.",
			"dotnet sln ../../ add ${1:Packages.Main}.csproj",
			"",
			"# Return to the root directory.",
			"cd ../.."
		]
	},
	"Build solution.zip files which can be imported": {
		"scope": "powershell",
		"prefix": "CFB07-build-solutions",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFB07: Build solution.zip files which can be imported                ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Dataverse solutions come in two forms: unmanaged and managed.",
			"#",
			"# Unmanaged solutions are for development and act as containers for tracking components.",
			"# When deleted, components remain in the system. Use them to export definitions from your",
			"# environment to source control.",
			"#",
			"# Managed solutions are for deployments. They layer component definitions, support merging",
			"# of some components (diffs) and can be uninstalled if there are no dependencies. Import",
			"# order is important. 'Managed properties' can restrict modifications to components.",
			"#",
			"# Production environments should not contain unmanaged components and unmanaged customizations",
			"# should not be made in the Active layer.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                      Solution Building",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Import unmanaged solutions into developer environments for modifications with web tools. You",
			"# need managed solutions to create layers and track diffs for syncing to source control.",
			"#",
			"# To build both types, set `<Managed>2</Managed>` in Solution.xml. The Solution Package Tool",
			"# (SPT) can then pack both types from source. Microsoft.PowerApps.MSBuild.Solution NuGet",
			"# triggers SPT when running the `Build` target (e.g., 'dotnet build').",
			"#",
			"# For PDPackage projects, use the `Publish` target to generate deployment packages.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#",
			"cd ./src/Solutions.DataModel",
			"dotnet build --configuration Release",
			"cd ../../",
			"",
			"cd ./src/Solutions.UI",
			"dotnet build --configuration Release",
			"cd ../../",
			"",
			"cd ./src/Solutions.Security",
			"dotnet build --configuration Release",
			"cd ../../",
			"",
			"dotnet publish --configuration Release"
		]
	}
}