{
    "Create a project with UI tests": {
		"scope": "powershell",
		"prefix": "CFE01-create-ui-tests",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                          CFE01: Create a project for UI tests                          ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script creates an application in which you can write tests in the Gherkin language. ",
			"# When creating this application from template, you can automatically initialize user secrets,  ",
			"# connect the FluentAssertions library,   ",
			"# choose a framework to test your application (MStest, NUnit, XUnit )    ",
			"# and generate appsetings.json to configure your tests    ",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#",
			"# Step 1: Create project from template",
			"#",
			"dotnet new pp-test-ui `",
			"--output \"src/Tests.UI\" `",
			"--createAppsetingsFile true `",
			"--enableUserSecrets true `",
			"--testExecutionFramework \"mstest\" `",
			"--includeFluentAssertions true `",
			"--enableCucumberSupport true `",
			"--allow-scripts yes",
			"#",
			"# Step 2: Add .feature file to project",
			"dotnet new pp-test-ui-feature `",
			"--output \"src\\Tests.UI\" ",
			"#",
			"dotnet sln add src/Tests.UI"
		]
	},
	"Background: Login to app": {
    "scope": "cucumber",
    "prefix": "CFE02-background-login",
    "body": [
        "#",
        "# ╔════════════════════════════════════════════════════════════════════╗",
        "# ║                   CFE02: Login to Warehouse Management App         ║",
        "# ╚════════════════════════════════════════════════════════════════════╝",
        "#",
        "# This background is used to ensure the user is logged in before running scenarios.",
        "# It sets up the initial state for testing by logging into the app as a test user.",
        "#",
        "Background:",
        "  Given I am logged in to the 'Warehouse Management App' app as 'TestUser' "
    ],
    "description": "Reusable background for logging into the Warehouse App"
	},
	"Create New Warehouse Item": {
    "prefix": "CFE03-create-warehouse-item",
    "scope": "cucumber",
    "body": [
        "#",
        "# ╔════════════════════════════════════════════════════════════════════╗",
        "# ║                 CFE03: Create a new warehouse item                 ║",
        "# ╚════════════════════════════════════════════════════════════════════╝",
        "#",
        "# This scenario tests the creation of a new warehouse item in the app.",
        "# It navigates to the appropriate section, fills in the required field, and saves the record.",
        "#",
        "Scenario: Create new warehouse item",
        "  When I open the 'Warehouse Items' sub area of the 'New Group' group ",
        "  And I select the 'New' command",
        "  And I enter 'Test Item ABC123' into the 'Name' field on the form ",
        "  And I save the record "
    ],
    "description": "Create a new warehouse item"
	},
	"Fill All Fields via Table": {
    "prefix": "CFE04-fill-warehouse-item-table",
    "scope": "cucumber",
    "body": [
        "#",
        "# ╔════════════════════════════════════════════════════════════════════╗",
        "# ║          CFE04: Fill warehouse item fields using table input       ║",
        "# ╚════════════════════════════════════════════════════════════════════╝",
        "#",
        "# This scenario tests filling multiple fields of a warehouse item using a table.",
        "# It navigates to the form, inputs data via a table, and saves the record.",
        "#",
        "Scenario: Fill all fields of Warehouse Item via table input",
        "  When I open the 'Warehouse Items' sub area of the 'New Group' group ",
        "  And I select the 'New' command ",
        "  And I enter the following into the form ",
        "    | Field           | Value           |",
        "    | Name            | Item ABC-XYZ    |",
        "    | Oprion Set Test | First           |",
        "    | Date time       | 4/2/2025        |",
        "  And I save the record "
    ],
    "description": "Fill form fields using table input"
	},
	"Run ui test": {
		"scope": "powershell",
		"prefix": "CFE05-Run-UI-tests",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                                   CFE05: Run UI Test                                   ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Once we have uploaded the solution and published our application, we are ready to run tests.",
			"# This script guides you through the process of configuring and running UI tests for a .NET application.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add the URL of your application to appsettings.json",
			"# Purpose: UI tests need to know the base URL of the deployed application (e.g., local or staging).",
			"# Instructions:",
			"#   a) Locate the 'appsettings.json' file in your test project folder (or create one if it doesn't exist).",
			"#   b) Add a section to specify the base URL of your application. Example:",
			"#      ```json",
			"#      {",
			"#        \"AppSettings\": {",
			"#          \"Url\": \"https://YourApplicationURL:101\"",
			"#        }",
			"#      }",
			"#",
			"#   d) Ensure the application is running and accessible at the specified URL during testing.",
			"",
			"# Step 2: Add testing user data to NuGet User Secrets",
			"# Purpose: Store sensitive test user credentials securely, outside of source code.",
			"# Instructions:",
			"#   a) Open a terminal in your test project folder.",
			"#   b) Add test user credentials (e.g., username and password) using the following commands:",
			"#",     
			"#      dotnet user-secrets set \"TestUser:Username\" \"testuser@example.com\"",
			"#      dotnet user-secrets set \"TestUser:Password\" \"TestPassword123!\"",
			"#      dotnet user-secrets set \"TestUser:Alias\" \"TestAlias\"",
			"#",
			"#   c) Ensure the test user exists in the application's database or authentication system.",
			"",
			"# Step 3: Run the tests locally",
			"# Instructions:",
			"#   c) Open a terminal in the test project folder and run:",
			"#",
			"#      dotnet test",
		]
	}
}