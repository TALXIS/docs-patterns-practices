{
    "Create a project with UI tests": {
		"scope": "powershell",
		"prefix": "CFE01-create-ui-tests",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                          CFE01: Create a project for UI tests                          ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script creates an application in which you can write tests in the Gherkin language. ",
			"# When creating this application from template, you can automatically initialize user secrets,  ",
			"# connect the FluentAssertions library,   ",
			"# choose a framework to test your application (MStest, NUnit, XUnit )    ",
			"# and generate appsetings.json to configure your tests    ",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#",
			"# Step 1: Create project from template",
			"#",
			"dotnet new pp-test-ui `",
			"--output \"src/Tests.UI\" `",
			"--createAppsetingsFile true `",
			"--enableUserSecrets true `",
			"--testExecutionFramework \"mstest\" `",
			"--includeFluentAssertions true `",
			"--enableCucumberSupport true `",
			"--allow-scripts yes",
			"#",
			"# Step 2: Add .feature file to project",
			"dotnet new pp-test-ui-feature `",
			"--output \"src\\Tests.UI\" ",
			"#",
			"dotnet sln add src/Tests.UI"
		]
	},
	"Background: Login to app": {
    "scope": "cucumber",
    "prefix": "CFE02-background-login",
    "body": [
        "# ╔══════════════════════════════════════════════════════════════════════════════════════╗",
      "# ║                      Feature: Add Stock to Available Quantity                        ║",
      "# ╚══════════════════════════════════════════════════════════════════════════════════════╝",
      "#",
      "# This Gherkin scenario tests increasing the Available Quantity of an item after",
      "# creating a Warehouse Transaction.",
      "#",
      "# It verifies that the 'Available Quantity' is recalculated correctly after an",
      "# inbound transaction is added.",
      "#",
      "# ────────────────────────────────────────────────────────────────────────────────────────",
      "# Background setup: login and item creation",
      "Feature: Add Stock",
      "",
      "  Background:",
      "    Given I am logged in to the 'Inventory Management' app as 'a Warehouse Manager'",
      "    And I have created 'a printer warehouse item of quantity 5'",
      "",
      "# ────────────────────────────────────────────────────────────────────────────────────────",
      "# Scenario: Performing the transaction and verifying available quantity",
      "  Scenario: Add Stock to Available Quantity",
      "",
      "    When I open the 'Warehouse Transactions' sub area of the 'New Group' group",
      "    And I select the 'New' command",
      "    And I enter the following into the form",
      "      | Value   | Field    |",
      "      | Inbound | Name     |",
      "      | Printer | Item     |",
      "    And I save the record",
      "    And I select a related 'Item' lookup field",
      "    Then I should be able to see a value of '10' in the 'Available Quantity' field"
    ],
    "description": "Reusable background for logging into the Warehouse App"
	},
	"Run ui test": {
	"scope": "powershell",
	"prefix": "CFE05-Run-UI-tests",
	"body": [
		"#",
		"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
		"# ║                                   CFE05: Run UI Test                                   ║",
		"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
		"#",
		"# Once we have uploaded the solution and published our application, we are ready to run tests.",
		"# This script guides you through the process of configuring and running UI tests for a .NET application.",
		"#",
		"# ──────────────────────────────────────────────────────────────────────────────────────────",
		"#                                        Commands",
		"# ──────────────────────────────────────────────────────────────────────────────────────────",
		"# Step 1: Add the URL of your application to appsettings.json",
		"# Purpose: UI tests need to know the base URL of the deployed application (e.g., local or staging).",
		"# Instructions:",
		"#   a) Locate the 'appsettings.json' file in your test project folder (or create one if it doesn't exist).",
		"#   b) Add a section to specify the base URL of your application. Example:",
		"#      ```json",
		"#        \"AppSettings\": {",
		"#          \"Url\": \"https://YourApplicationURL\"",
		"#        }",
		"#",
		"#   d) Ensure the application is running and accessible at the specified URL during testing.",
		"",
		"# Step 2: Add testing user data to NuGet User Secrets",
		"# Purpose: Store sensitive test user credentials and persona information securely, outside of source code.",
		"# Instructions:",
		"#   a) Open a terminal in your test project folder.",
		"      cd .\\src\\Tests.UI",
		"",
		"#   b) Add test user data using the following commands:",
		"#",
		"      dotnet user-secrets set \"Users:0:Username\" \"int0022-testing@demo.talxis.com\"",
		"      dotnet user-secrets set \"Users:0:Password\" \"$$TestUserPassword\"",
		"#",
		"      dotnet user-secrets set \"Personas:0:Alias\" \"a Warehouse Manager\"",
		"      dotnet user-secrets set \"Personas:0:Username\" \"int0022-testing@demo.talxis.com\"",
		"      dotnet user-secrets set \"Personas:0:SecurityRoles:0\" \"979144c2-989b-41a5-a146-6b3ea4130e8c\"",
		"      dotnet user-secrets set \"Personas:0:SecurityRoles:1\" \"$$WarehouseManagerGuidId\"",
		"#",
		"      dotnet user-secrets set \"Personas:1:Alias\" \"a Warehouse Worker\"",
		"      dotnet user-secrets set \"Personas:1:Username\" \"int0022-testing@demo.talxis.com\"",
		"      dotnet user-secrets set \"Personas:1:SecurityRoles:0\" \"979144c2-989b-41a5-a146-6b3ea4130e8c\"",
		"      dotnet user-secrets set \"Personas:1:SecurityRoles:1\" \"$$WarehouseWorkerId\"",
		"#",
		"      dotnet user-secrets set \"applicationUser:TenantId\" $$ServicePrincipal.tenant",
		"      dotnet user-secrets set \"applicationUser:ClientId\" $$ServicePrincipal.appId",
		"      dotnet user-secrets set \"applicationUser:ClientSecret\" $$ServicePrincipal.password",
		"#",
		"#   c) Ensure these users and settings exist in the system under test and are configured properly.",
		"      cd .\\..\\..",
		"",
		"# Step 3: Run the tests locally",
		"# Instructions:",
		"#   a) Open a terminal in the test project folder and run:",
		"#",
		"      dotnet test"
	]
}

}