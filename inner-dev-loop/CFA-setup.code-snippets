{
	"Power Platform Repository Demo Script Intro": {
		"scope": "powershell",
		"prefix": "CFA01-machine-setup",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFA01: Power Platform Repository Demo Script Intro                   ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This is a demo script to show how to set up a new repository for a Power Platform project.",
			"# Many of the steps are usually carried out in IDE or web browser, but for the sake of",
			"# the demo, we'll try to use the command line as much as possible to explain the process.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Prerequisites",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# 1. Install Visual Studio Code (VS Code) from https://code.visualstudio.com/",
			"",
			"# 2. Install the .NET SDK",
			"# https://dotnet.microsoft.com/en-us/download",
			"",
			"# 3. Install dotnet-script tool because it is used by some templates.",
			"","dotnet tool install --global \"dotnet-script\"",
			"",
			"# 4. Install PowerShell (macOS) since this demo and tools are using PowerShell scripts.",
			"dotnet tool install --global \"PowerShell\"",
			"",
			"# 5. Install PowerShell VS Code extension:",
			"# Open extension page from https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell",
			"",
			"# 6. Instal Cucumber VS Code extenstion for Gherkin test authoring:",
			"# Open extension page from https://marketplace.visualstudio.com/items?itemName=CucumberOpen.cucumber-official",
			"",
			"# 7. If you haven't used Git before, you need to install it and set your user name and email.",
			"# Download installation from https://git-scm.com/downloads",
			"git config --global user.name \"${2:Tomas Prokop}\"",
			"git config --global user.email \"${3:tomas.prokop@REDACTED.org}\"",
			"",
			"# 8. Configure NuGet to use the public package feed (might be already done by the SDK install)",
			"dotnet nuget add source \"https://api.nuget.org/v3/index.json\" -n \"nuget.org\"",
			"",
			"# 9. Install Azure CLI. More info: aka.ms/azcli-docs",
			"# Windows:",
			"winget install -e --id \"Microsoft.AzureCLI\"",
			"# macOS:",
			"brew install azure-cli",
			"",
			"# 10. Install Azure DevOps CLI extension",
			"az extension add --name \"azure-devops\"",
			"",
			"# 11. Install Power Platform CLI (pac). More info: https://aka.ms/PowerPlatformCLI",
			"# A) RECOMMENDED OPTION: Install with Windows MSI (Windows only)",
			"# https://aka.ms/PowerAppsCLI",
			"# ",
			"# B) Install with .NET Tool (modern cross-platform CLI which doesn't support Package Deployer and Configuration Migration Tool yet)",
			"dotnet tool install --global \"Microsoft.PowerApps.CLI.Tool\"",
			"#",
			"# C) Install the Visual Studio Code extension (available in VS Code terminal)",
			"# https://marketplace.visualstudio.com/items?itemName=microsoft-IsvExpTools.powerplatform-vscode",
			"",
			"# 12. Clear this file with Ctrl+A & Delete. Then type CFA02 and select the snippet to continue."
		]
	},
	"Initialize a new Git repository and create branches": {
		"scope": "powershell",
		"prefix": "CFA02-git-init",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                CFA02: Initialize a new Git repository and create branches              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Git is a distributed version control system that allows multiple developers to work on",
			"# the same project simultaneously. It tracks changes in the codebase, allows for collaboration",
			"# and provides a history of changes.",
			"#",
			"# A branch is a parallel version of the codebase that allows developers to work on features",
			"# or bug fixes without affecting the main codebase. Branches can be created, merged and deleted.",
			"#",
			"# Power Platform projects based on Dataverse can be versioned in Git repositories thanks to",
			"# solutions framework which allows exporting and importing components.",
			"#",
			"# We will adopt a trunk-based branching strategy, where all developers collaborate on the main",
			"# branch, resisting the creation of long-lived development branches which lead to merge hells.",
			"#",
			"# The '${1:main}' branch will serve as the integration point for all work.",
			"# Each feature or bug fix will be implemented on short-lived topic branches.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Initialize the Git repository with '${1:main}' as the default branch",
			"git init -b \"${1:main}\"",
			"",
			"# Step 2: Create an empty README file and commit it to the main branch to initialize the repository",
			"New-Item -Path README.md -ItemType File",
			"git add README.md",
			"git commit -m \"Initial commit\"",
			"",
			"# Step 3: To fix a bug or implement a feature, a developer creates a short-lived",
			"#         new branch off the main integration branch.",
			"git checkout -b \"${2:users/tomas.prokop/project-setup}\""
		]
	},
	"Create repository root files and folders": {
		"scope": "powershell",
		"prefix": "CFA03-create-repo-root-file-folders",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                    CFA03: Create repository root files and folders                     ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# A monorepo is a single repository that contains multiple projects, components or apps.",
			"# It's a simplified approach for components which are tightly integrated or frequently ",
			"# updated together.",
			"#",
			"# When repositories are split, the overhead of managing dependencies, versioning ",
			"# and artifact stores increases, which may not add value unless you're building reusable ",
			"# components for multiple customer projects. This reduces the complexity of coordinating ",
			"# dependent pull requests (PRs) and ensures that code reviews provide full context. ",
			"# Additionally, maintaining CI/CD pipelines is simpler, as orchestration is consolidated ",
			"# in one place instead of across multiple repositories.",
			"#",
			"# MSBuild and .NET project system helps to manage multiple projects in a single repository.",
			"# Visual Studio solution files (.sln) are used to keep track of the projects.",
			"#",
			"# A consistent folder structure in monorepos is essential because it keeps things simple ",
			"# and predictable. Without it, teams tend to isolate their projects in deep, nested directories,",
			"# which makes collaboration harder and code reuse less likely.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Generate a .gitignore file to exclude unnecessary files from being committed to Git.",
			"#         dotnet new template contains common rules for .NET projects.",
			"dotnet new gitignore",
			"",
			"# Step 2: Create a new Visual Studio solution file (not a Dataverse solution).",
			"dotnet new sln --name ${1:InventoryManagement}",
			"",
			"# Step 3: Create a `src` directory to hold the source code for your project(s).",
			"mkdir src",
			"",
			"# Step 4: For demonstration purposes, exclude the '.demo' and '.vscode' folders ",
			"#         from version control by adding it to `.gitignore`.",
			"Add-Content .gitignore \".demo/\"",
			"Add-Content .gitignore \".vscode/\""
		]
	}
}
