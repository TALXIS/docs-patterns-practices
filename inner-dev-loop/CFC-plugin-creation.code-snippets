{
    "Initialize PluginsWarehouse plugin project with two handlers": {
	"scope": "powershell",
	"prefix": "CFC01-init-plugins-warehouse",
	"body": [
		"#",
		"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
		"# ║       CFC01: Initialize PluginsWarehouse plugin project with signing and handlers      ║",
		"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
		"#",
		"# This script automates the setup of a new Dataverse plugin project for handling",
		"# warehouse-related operations. It performs the following:",
		"# 1. Creates a project folder 'src/PluginsWarehouse'",
		"# 2. Generates a strong-name key (PluginKey.snk)",
		"# 3. Initializes a new plugin project using Power Platform CLI",
		"# 4. Removes the default Plugin1.cs",
		"# 5. Creates two handler classes:",
		"#    - ValidateWarehouseTransactionPlugin.cs (PreValidation)",
		"#    - SubtractQuantityPlugin.cs (PostOperation)",
		"#",
		"# ──────────────────────────────────────────────────────────────────────────────────────────",
		"#                                        Script",
		"# ──────────────────────────────────────────────────────────────────────────────────────────",
		"mkdir src/PluginsWarehouse",
		"cd src/PluginsWarehouse",
		"",
		"# Step 1: Locate sn.exe to generate signing key",
		"$$possiblePaths = @(",
		"    \"${${env:env:ProgramFiles(x86)}}\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\sn.exe\",",
		"    \"${${env:env:ProgramFiles(x86)}}\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.7.2 Tools\\sn.exe\",",
		"    \"${${env:env:ProgramFiles(x86)}}\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.7.1 Tools\\sn.exe\",",
		"    \"${${env:env:ProgramFiles(x86)}}\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.7 Tools\\sn.exe\"",
		")",
		"$$snPath = $$possiblePaths | Where-Object { Test-Path $$_ } | Select-Object -First 1",
		"",
		"",
		"# Step 2: Generate key file",
		"$$keyFile = \"PluginKey.snk\"",
		"& $$snPath -k $$keyFile",
		"",
		"# Step 3: Initialize plugin project",
		"pac plugin init --signing-key-file-path PluginKey.snk",
		"",
		"# Step 4: Remove default class",
		"Remove-Item .\\Plugin1.cs -ErrorAction SilentlyContinue",
		"",
		"# Step 5: Add custom plugin class files",
		"New-Item -Path . -Name \"ValidateWarehouseTransactionPlugin.cs\" -ItemType \"File\" | Out-Null",
		"New-Item -Path . -Name \"SubtractQuantityPlugin.cs\" -ItemType \"File\" | Out-Null",
		"",
		"cd ../../",
		"",
	]
}
,
    "Validate Warehouse Transaction Plugin": {
        "scope": "csharp",
        "prefix": "CFC02-validate-warehouse-plugin",
        "body": [
            "// ╔════════════════════════════════════════════════════════════════════════════════════════╗",
            "// ║            CFC02: Plugin - Validate Warehouse Transaction Quantity (PreValidation)     ║",
            "// ╚════════════════════════════════════════════════════════════════════════════════════════╝",
            "//",
            "// This plugin checks if the requested quantity exceeds available quantity",
            "// for a Warehouse Item and throws an exception if validation fails.",
            "//",
            "// Triggered on: Create → tom_warehousetransaction",
            "// Stage: PreValidation",
            "using Microsoft.Xrm.Sdk;",
            "using Microsoft.Xrm.Sdk.Query;",
            "using System;",
            "",
            "namespace PluginsWarehouse",
            "{",
            "    public class ValidateWarehouseTransactionPlugin : PluginBase",
            "    {",
            "        public ValidateWarehouseTransactionPlugin(string unsecureConfiguration, string secureConfiguration)",
            "            : base(typeof(ValidateWarehouseTransactionPlugin))",
            "        {",
            "        }",
            "",
            "        protected override void ExecuteDataversePlugin(ILocalPluginContext localPluginContext)",
            "        {",
            "            if (localPluginContext == null)",
            "            {",
            "                throw new ArgumentNullException(nameof(localPluginContext));",
            "            }",
            "",
            "            var context = localPluginContext.PluginExecutionContext;",
            "            var serviceFactory = localPluginContext.OrgSvcFactory;",
            "            var service = serviceFactory.CreateOrganizationService(context.UserId);",
            "            var tracingService = localPluginContext.TracingService;",
            "",
            "            if (!(context.InputParameters.Contains(\"Target\") && context.InputParameters[\"Target\"] is Entity target) || target.LogicalName != \"tom_warehousetransaction\")",
            "                return;",
            "",
            "            if (!target.Contains(\"tom_quantity\") || !target.Contains(\"tom_itemid\"))",
            "                return;",
            "",
            "            try",
            "            {",
            "                var quantity = (int)target[\"tom_quantity\"];",
            "                var itemRef = (EntityReference)target[\"tom_itemid\"];",
            "",
            "                var item = service.Retrieve(\"tom_warehouseitem\", itemRef.Id, new ColumnSet(\"tom_availablequantity\"));",
            "                var available = (int)item[\"tom_availablequantity\"];",
            "",
            "                if (quantity > available)",
            "                {",
            "                    throw new InvalidPluginExecutionException($\"Not enough product in stock. Available: {available}, requested: {quantity}.\");",
            "                }",
            "            }",
            "            catch (Exception ex)",
            "            {",
            "                tracingService.Trace(\"Plugin1 Exception: {0}\", ex.ToString());",
            "                throw;",
            "            }",
            "        }",
            "    }",
            "}"
        ]
    },
    "Subtract Quantity Plugin": {
        "scope": "csharp",
        "prefix": "CFC03-subtract-quantity-plugin",
        "body": [
            "// ╔════════════════════════════════════════════════════════════════════════════════════════╗",
            "// ║         CFC03: Plugin - Subtract Quantity From Available (PostOperation)               ║",
            "// ╚════════════════════════════════════════════════════════════════════════════════════════╝",
            "//",
            "// This plugin subtracts the requested quantity from the available quantity of",
            "// a Warehouse Item after a transaction is created.",
            "//",
            "// Triggered on: Create → tom_warehousetransaction",
            "// Stage: PostOperation",
            "using Microsoft.Xrm.Sdk;",
            "using Microsoft.Xrm.Sdk.Query;",
            "using System;",
            "",
            "namespace PluginsWarehouse",
            "{",
            "    public class SubtractQuantityPlugin : PluginBase",
            "    {",
            "        public SubtractQuantityPlugin(string unsecureConfiguration, string secureConfiguration)",
            "            : base(typeof(SubtractQuantityPlugin))",
            "        {",
            "        }",
            "",
            "        protected override void ExecuteDataversePlugin(ILocalPluginContext localPluginContext)",
            "        {",
            "            if (localPluginContext == null)",
            "            {",
            "                throw new ArgumentNullException(nameof(localPluginContext));",
            "            }",
            "",
            "            var context = localPluginContext.PluginExecutionContext;",
            "            var serviceFactory = localPluginContext.OrgSvcFactory;",
            "            var service = serviceFactory.CreateOrganizationService(context.UserId);",
            "",
            "            if (!(context.InputParameters[\"Target\"] is Entity target) || target.LogicalName != \"tom_warehousetransaction\")",
            "                return;",
            "",
            "            if (!target.Contains(\"tom_quantity\") || !target.Contains(\"tom_itemid\"))",
            "                return;",
            "",
            "            var quantity = ((int)target[\"tom_quantity\"]);",
            "            var itemRef = (EntityReference)target[\"tom_itemid\"];",
            "",
            "            var item = service.Retrieve(\"tom_warehouseitem\", itemRef.Id, new ColumnSet(\"tom_availablequantity\"));",
            "            var available = ((int)item[\"tom_availablequantity\"]);",
            "",
            "            item[\"tom_availablequantity\"] = available - quantity;",
            "            service.Update(item);",
            "        }",
            "    }",
            "}"
        ]
    },
    "Add AutoGenerateBindingRedirects to .csproj": {
        "scope": "powershell",
        "prefix": "CFC04-add-binding-redirects",
        "body": [
            "#",
            "# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
            "# ║         CFC04: Add AutoGenerateBindingRedirects to the .cdsproj for plugin build        ║",
            "# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
            "#",
            "# This script automatically updates the .csproj file to include binding redirect settings,",
            "# which resolve conflicts between different versions of the same assemblies during build.",
            "#",
            "# It adds the following inside the first <PropertyGroup>:",
            "#     <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>",
            "#     <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>",
            "#",
            "# This is especially useful when working with Dataverse plugin projects on .NET Framework.",
            "#",
            "# ──────────────────────────────────────────────────────────────────────────────────────────",
            "#                                        Script",
            "# ──────────────────────────────────────────────────────────────────────────────────────────",
            "$$csprojPath = \"src/SolutionsLogic/SolutionsLogic.cdsproj\"",
            "",
            "[xml]$$xml = Get-Content $$csprojPath",
            "",
            "$$propertyGroup = $$xml.Project.PropertyGroup | Where-Object { $$_.AutoGenerateBindingRedirects -eq $$null } | Select-Object -First 1",
            "",
            "",
            "$$autoRedirect = $$xml.CreateElement(\"AutoGenerateBindingRedirects\", $$xml.DocumentElement.NamespaceURI)",
            "$$autoRedirect.InnerText = \"true\"",
            "$$propertyGroup.AppendChild($$autoRedirect) | Out-Null",
            "",
            "$$generateOutput = $$xml.CreateElement(\"GenerateBindingRedirectsOutputType\", $$xml.DocumentElement.NamespaceURI)",
            "$$generateOutput.InnerText = \"true\"",
            "$$propertyGroup.AppendChild($$generateOutput) | Out-Null",
            "",
            "$$xml.Save($$csprojPath)",
            "",
        ]
    },
    "Build and Register Plugin in PRT": {
        "scope": "powershell",
        "prefix": "CFC05-register-plugin",
        "body": [
            "# ╔════════════════════════════════════════════════════════════════════════════════════╗",
            "# ║                            CFC05: Register Plugin in PRT                           ║",
            "# ╚════════════════════════════════════════════════════════════════════════════════════╝",
            "#",
            "# Step 1: Build plugin",
            "   cd src/PluginsWarehouse",
            "   dotnet build",
            "   cd ../..",
            "#",
            "# Step 2: Open Plugin Registration Tool (from PowerApps Tools)",
            "#",
            "pac tool prt",
            "#",
            "# Step 4: Register Assembly → Select DLL → Storage: Database, Isolation: Sandbox",
            "#",
            "# Step 5: Register two steps:",
            "# ────── ValidateWarehouseTransactionPlugin:",
            "#    - Message: Create",
            "#    - Entity: tom_warehousetransaction",
            "#    - Filtering Attributes: tom_itemid, tom_quantity",
            "#    - Stage: PreValidation",
            "#    - Mode: Synchronous",
            "# ────── SubtractQuantityPlugin:",
            "#    - Message: Create",
            "#    - Entity: tom_warehousetransaction",
            "#    - Filtering Attributes: tom_itemid, tom_quantity",
            "#    - Stage: PostOperation",
            "#    - Mode: Synchronous"
        ]
    }
}