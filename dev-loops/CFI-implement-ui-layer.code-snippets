{
	"Create UI Solution and Add Existing Tables": {
		"scope": "powershell",
		"prefix": "CFI01-ui-solution-entities",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║         CFI01: Create UI Solution and Add Existing Tables from Data Model              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script initializes a new UI solution and links existing tables (entities) that",
			"# were defined in the data model project. This separation ensures clean layering between",
			"# data and presentation components of the solution.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the UI layer solution project.",
			"dotnet new pp-solution `",
			"--output \"src/Solutions.UI\" `",
			"--PublisherName \"$${publisherPrefix}\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add the solution project to the Package Deployer project as a .NET ProjectReference item.",
			"cd src/Packages.Main",
			"pac package add-reference --path ../Solutions.UI/",
			"cd ../..",
			"",
			"# Step 3: Link existing entities from the data model.",
			"dotnet new pp-entity `",
			"--output \"src/Solutions.UI\" `",
			"--Behavior \"Existing\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--LogicalName \"warehouseitem\" `",
			"--DisplayName \"Warehouse Item\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-entity `",
			"--output \"src/Solutions.UI\" `",
			"--Behavior \"Existing\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--LogicalName \"warehousetransaction\" `",
			"--DisplayName \"Warehouse Transaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes"
		]
	},
	"Create Model-Driven App and Add Entities to App": {
		"scope": "powershell",
		"prefix": "CFI02-ui-app-model",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║        CFI02: Create Model-Driven App and Register Entity Components                   ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script creates a model-driven application and registers each entity as a component",
			"# of the app. These components control what data and forms are shown within the app shell.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the model-driven app project.",
			"dotnet new pp-app-model `",
			"--output \"src/Solutions.UI\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--LogicalName \"warehouseapp\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"dotnet sln add src/Solutions.UI",
			"",
			"# Step 2: Add both entities to the app as components.",
			"dotnet new pp-app-model-component `",
			"--output \"src/Solutions.UI\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-app-model-component `",
			"--output \"src/Solutions.UI\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes"
		]
	},
	"Add Sitemap Navigation to App": {
		"scope": "powershell",
		"prefix": "CFI03-ui-sitemap",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                  CFI03: Add Sitemap Structure (Area, Group, Subareas)                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds a sitemap to the WarehouseApp with an area, a group, and two subareas. This controls",
			"# the navigation in the app interface and enables users to access the linked entities.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add sitemap area.",
			"dotnet new pp-sitemap-area `",
			"--output \"src/Solutions.UI\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add group inside the area.",
			"dotnet new pp-sitemap-group `",
			"--output \"src/Solutions.UI\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"# Step 3: Add subareas for both entities.",
			"dotnet new pp-sitemap-subarea `",
			"--output \"src/Solutions.UI\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehouseitem\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-sitemap-subarea `",
			"--output \"src/Solutions.UI\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes"
		]
	},
	"Create Main Forms for Entities": {
		"scope": "powershell",
		"prefix": "CFI04-ui-forms",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                        CFI04: Create Main Forms for Entities                          ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Forms define how users interact with each entity. This step creates new empty main forms",
			"# for both Warehouse Item and Warehouse Transaction entities.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Generate GUIDs for forms (to be reused in the next step).",
			"$$warehouseitemFormGuid = [guid]::NewGuid()",
			"$$warehousetransactionFormGuid = [guid]::NewGuid()",
			"",
			"# Create empty 'main' forms for each entity.",
			"dotnet new pp-entity-form  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\" `",
			"--SolutionRootPath \"Declarations\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\"  `",
			"--FormId $$warehouseitemFormGuid  `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-entity-form  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"dialog\" `",
			"--SolutionRootPath \"Declarations\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\"  `",
			"--FormId $$warehousetransactionFormGuid  `",
			"--allow-scripts yes",
			"",
			"# We also need to add these as components to the app",
			"",
			"dotnet new pp-app-model-component `",
			"--output \"src/Solutions.UI\" `",
			"--EntityType \"Form\" `",
			"--ComponentId \"$$warehouseitemFormGuid\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Create View for Warehouse Transaction lookup": {
		"scope": "powershell",
		"prefix": "CFI05-create-view-for-warehouse-transaction-lookup",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                     CFI05: Create View for Warehouse Transaction Lookup                ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Creates a view for the Warehouse Transaction lookup.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Generate GUID for the view (to be reused in the next step).",
			"$$warehousetransactionLookupViewGuid = [guid]::NewGuid()",
			"",
			"# Step 1: Create a view for the Warehouse Transaction lookup.",
			"dotnet new pp-entity-view `",
			"--output \"src/Solutions.UI\" `",
			"--ViewId $$warehousetransactionLookupViewGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" ",
			"",
			"# Step 2: Add the view to the app as a component.",
			"dotnet new pp-app-model-component `",
			"--output \"src/Solutions.UI\" `",
			"--EntityType \"View\" `",
			"--ComponentId $$warehousetransactionLookupViewGuid `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
		]
	},
	"Add Tabs to Entity Forms": {
		"scope": "powershell",
		"prefix": "CFI06-ui-form-fields",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                     CFI05: Add Tabs to Main Forms                                      ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds tabs to the forms created earlier using the pre-generated GUIDs.",
			"# Ensure CFI04 has been executed and form GUID variables are in scope.",
			"#",
			"# Form Structure Hierarchy:",
			"# ┌─────────────────────────────────────────────────────────────────────────────────────┐",
			"# │ Form                                                                                │",
			"# │ ├─ Tab (CFI05)                                                                      │",
			"# │   ├─ Column (CFI06)                                                                 │",
			"# │     ├─ Section (CFI06)                                                              │",
			"# │       ├─ Row (CFI06)                                                                │",
			"# │         ├─ Cell (CFI07)                                                             │",
			"# │           └─ Control (CFI08)                                                        │",
			"# └─────────────────────────────────────────────────────────────────────────────────────┘",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"dotnet new pp-form-tab  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--RemoveDefaultTab \"True\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-tab  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"dialog\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--RemoveDefaultTab \"True\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Add colummns, sections and rows to Entity Forms": {
		"scope": "powershell",
		"prefix": "CFI07-ui-form-columns-sections-rows",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                     CFI06: Add colummns, sections and rows to Main Forms              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds columns, sections and rows to the forms created earlier using the pre-generated GUIDs.",
			"# This step creates the structural foundation for form layout before adding cells and controls.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add column to the form.",
			"dotnet new pp-form-column  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-column  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add section to the form.",
			"dotnet new pp-form-section  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-section  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Step 3: Add rows to the form.",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Add Cells to Entity Forms": {
		"scope": "powershell",
		"prefix": "CFI08-ui-form-cells",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                        CFI07: Add Cells to Entity Forms                                 ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds cells to the forms created earlier using the pre-generated GUIDs.",
			"# Cells define the layout structure within rows and contain the actual form controls.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Add cells for Warehouse Item entity form",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"1\"  `",
			"--FormType \"main\"  `",
			"--DisplayName \"Name\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"2\"  `",
			"--FormType \"main\"  `",
			"--DisplayName \"Available Quantity\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"3\"  `",
			"--FormType \"main\"  `",
			"--DisplayName \"Package Type\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Add cells for Warehouse Transaction entity form",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"1\"  `",
			"--DisplayName \"Name\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"2\"  `",
			"--DisplayName \"Quantity\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"3\"  `",
			"--DisplayName \"Item\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"4\"  `",
			"--DisplayName \"Payment Method\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes"
		]
	},
	"Add Cell Controls to Entity Forms": {
		"scope": "powershell",
		"prefix": "CFI09-ui-form-controls",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                    CFI08: Add Cell Controls to Entity Forms                           ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds cell controls to the forms created earlier using the pre-generated GUIDs.",
			"# Cell controls bind the actual entity attributes to the form cells for data input/display.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Add cell controls for Warehouse Item entity form",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"Text\"  `",
			"--RowIndex \"1\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_name\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"WholeNumber\"  `",
			"--RowIndex \"2\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_availablequantity\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"OptionSet\"  `",
			"--RowIndex \"3\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_packagetype\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Add cell controls for Warehouse Transaction entity form",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"Text\"  `",
			"--RowIndex \"1\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_name\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"WholeNumber\"  `",
			"--RowIndex \"2\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_quantity\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"Lookup\"  `",
			"--RowIndex \"3\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_itemid\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"OptionSet\"  `",
			"--RowIndex \"4\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_paymentmethod\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes"
		]
	},
	"CFI10-add-parameters-to-dialog": {
		"scope": "powershell",
		"prefix": "CFI10-add-parameters-to-dialog",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFI10: Add Parameters to Warehouse Transaction Dialog                    ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds parameters to the warehouse transaction dialog form.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Add lookup parameter for Item reference",
			"dotnet new pp-form-parameters  `",
			"--output \"src/Solutions.UI\"  `",
			"--ParameterType \"Lookup\"  `",
			"--RowIndex \"3\"  `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehouseitem\"  `",
			"--DefaultViewId $$warehousetransactionLookupViewGuid  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--SolutionRootPath \"Declarations\" `",
			"--FormType \"dialog\"  `",
			"--allow-scripts yes",
			"",
			"# Add optionset parameter for Payment Method",
			"dotnet new pp-form-parameters  `",
			"--output \"src/Solutions.UI\"  `",
			"--ParameterType \"OptionSet\"  `",
			"--RowIndex \"4\"  `",
			"--OptionSetName \"${${publisherPrefix}}_paymentmethod\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--SolutionRootPath \"Declarations\" `",
			"--FormType \"dialog\"  `",
			"--allow-scripts yes"
		]
	},
	"CFI11-add-save-button-to-dialog": {
		"scope": "powershell",
		"prefix": "CFI11-add-save-button-to-dialog",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFI11: Add Save Button to Warehouse Transaction Dialog                    ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds a save button to the warehouse transaction dialog form.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Add save button to warehouse transaction dialog form",
			"dotnet new PP-form-dialog-tabfooter `",
			"--output \"src/Solutions.UI\" `",
			"--FormId $$warehousetransactionFormGuid `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--SetToTabFooter \"True\"  `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--DisplayName \"Save\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--SolutionRootPath \"Declarations\" `",
			"--SetToTabFooter \"True\"  `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_savebutton\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--SolutionRootPath \"Declarations\" `",
			"--SetToTabFooter \"True\"  `",
			"--ControlType \"Button\"  `",
			"--allow-scripts yes"
		]
	},
	"Create Read Only Form for Warehouse Transaction": {
		"scope": "powershell",
		"prefix": "CFI12-create-read-only-form-for-warehouse-transaction",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFI11: Create Read Only Form for Warehouse Transaction                   ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Creates a read only form for the warehouse transaction entity.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Create read only form for warehouse transaction entity",
			"dotnet new pp-entity-form  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-tab  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--RemoveDefaultTab \"True\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-column  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-section  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--RowIndex \"1\"  `",
			"--DisplayName \"Name\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--RowIndex \"2\"  `",
			"--DisplayName \"Quantity\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--RowIndex \"3\"  `",
			"--DisplayName \"Item\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--RowIndex \"4\"  `",
			"--DisplayName \"Payment Method\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"Text\"  `",
			"--FormType \"main\"  `",
			"--RowIndex \"1\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_name\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--isReadOnly \"true\"  `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"WholeNumber\"  `",
			"--FormType \"main\"  `",
			"--RowIndex \"2\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_quantity\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--isReadOnly \"true\"  `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"Lookup\"  `",
			"--FormType \"main\"  `",
			"--RowIndex \"3\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_itemid\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--isReadOnly \"true\"  `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"OptionSet\"  `",
			"--FormType \"main\"  `",
			"--RowIndex \"4\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_paymentmethod\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--isReadOnly \"true\"  `",
			"--allow-scripts yes",
			"",
		]
	},
	"Add Ribbon Button": {
		"scope": "powershell",
		"prefix": "CFI13-add-ribbon-button",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFI10: Add Ribbon Button to Warehouse Transaction Dialog                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds a ribbon button to the warehouse transaction dialog form.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Add ribbon button to warehouse transaction dialog form",
			"dotnet new pp-ribbon-button `",
			"--output \"src/Solutions.UI\" `",
			"--Location \"Home\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--ButtonLable \"Create Warehouse Transaction\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--LibraryLogicalName \"${${publisherPrefix}}_${${publisherPrefix}}_main.js\" `",
			"--FunctionName \"MyRibbon.Dialogs.OpenDialog\" `",
			"--allow-scripts yes",
			"",
			"# Add ribbon command parameters",
			"dotnet new pp-ribbon-command-parameter `",
			"--output \"src/Solutions.UI\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--LibraryLogicalName \"${${publisherPrefix}}_${${publisherPrefix}}_main.js\" `",
			"--FunctionName \"MyRibbon.Dialogs.OpenDialog\" `",
			"--ParameterInput \"${${publisherPrefix}}_generatedformdialog\" `",
			"--ParameterType \"String\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-ribbon-command-parameter `",
			"--output \"src/Solutions.UI\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--LibraryLogicalName \"${${publisherPrefix}}_${${publisherPrefix}}_main.js\" `",
			"--FunctionName \"MyRibbon.Dialogs.OpenDialog\" `",
			"--ParameterType \"CrmSelectedControl\" `",
			"--allow-scripts yes",
			"",
			"# Hide generic New record button from ribbon",
			"dotnet new pp-ribbon-button-hide `",
			"--output \"src/Solutions.UI\" `",
			"--ButtonToHide \"New Record\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Create Script Library in UI Solution": {
		"scope": "powershell",
		"prefix": "CFI14-create-script-library",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                    CFG08: Create Script Library in UI Solution                         ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script creates a Power Platform Script Library within the existing UI solution.",
			"# Script libraries are used for client-side logic, ribbon customizations,",
			"# and form interactions in Power Platform applications.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the Script Library in the existing UI solution",
			"dotnet new pp-script-library `",
			"--output \"src/Solutions.UI\" `",
			"--LibraryName \"main\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Create TypeScript files for warehouse transaction functionality",
			"mkdir src/Solutions.UI/TS/scripts",
			"",
			"# Create file for opening warehouse transaction dialog",
			"New-Item -Path \"src/Solutions.UI/TS/scripts\" -Name \"OpenWarehouseTransactionDialog.ts\" -ItemType \"File\" | Out-Null",
			"",
			"# Create file for saving warehouse transaction data",
			"New-Item -Path \"src/Solutions.UI/TS/scripts\" -Name \"SaveWarehouseTransactionData.ts\" -ItemType \"File\" | Out-Null",
			"",
			"# Add placeholder comments to trigger snippet suggestions",
			"\"// type CFI15 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"src/Solutions.UI/TS/scripts/OpenWarehouseTransactionDialog.ts\"",
			"\"// type CFI16 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"src/Solutions.UI/TS/scripts/SaveWarehouseTransactionData.ts\"",
			"",
			"# Open files in VS Code for editing",
			"code \"src/Solutions.UI/TS/scripts/OpenWarehouseTransactionDialog.ts\"",
			"code \"src/Solutions.UI/TS/scripts/SaveWarehouseTransactionData.ts\""
		]
	},
	"Open Warehouse Transaction Dialog Script": {
		"scope": "typescript",
		"prefix": "CFI15-open-dialog-script",
		"body": [
			"// ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"// ║              CFG09: Open Warehouse Transaction Dialog from Ribbon Button              ║",
			"// ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"//",
			"// This TypeScript function opens the warehouse transaction dialog form when called",
			"// from a ribbon button. It uses the Xrm.Navigation API to open the dialog form.",
			"//",
			"// The dialog form was created in CFI04-ui-forms with FormType \"dialog\"",
			"//",
			"// ──────────────────────────────────────────────────────────────────────────────────────────",
			"//                                        Function",
			"// ──────────────────────────────────────────────────────────────────────────────────────────",
			"",
			"namespace MyRibbon {",
			"    export class Dialogs {",
			"        /**",
			"         * Open dialog by unique name using modern API and optionally refresh grid control.",
			"         */",
			"        public static async OpenDialog(",
			"            dialogUniqueName: string,",
			"            selectedControl?: Xrm.Controls.GridControl",
			"        ): Promise<void> {",
			"            // @ts-ignore - openDialog is available in supported clients",
			"            await Xrm.Navigation.openDialog(dialogUniqueName, {",
			"                position: 1,",
			"                height: 900,",
			"                width: 900",
			"            }, null);",
			"",
			"            selectedControl?.refresh();",
			"        }",
			"    }",
			"",
			"    export const openLegacyDialog = Dialogs.OpenDialog;",
			"}"
		]
	},
	"Save Warehouse Transaction Data Script": {
		"scope": "typescript",
		"prefix": "CFI16-save-data-script",
		"body": [
			"// ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"// ║                CFG10: Save Warehouse Transaction Data from Form Button                ║",
			"// ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"//",
			"// This TypeScript function saves the warehouse transaction data when called from a form button.",
			"// It validates the form data, creates a new warehouse transaction record, and handles errors.",
			"//",
			"// This function should be called from a button in the warehouse transaction dialog form",
			"// created in CFI04-ui-forms",
			"//",
			"// ──────────────────────────────────────────────────────────────────────────────────────────",
			"//                                        Function",
			"// ──────────────────────────────────────────────────────────────────────────────────────────",
			"namespace UdppDialog {",
			"    export class Actions {",
			"        /**",
			"         * Save dialog data into udpp_warehousetransaction and close the window.",
			"         * Can be invoked from a Ribbon button or OnClick.",
			"         */",
			"        public static async saveAndClose(executionContext?: Xrm.Events.EventContext): Promise<void> {",
			"            try {",
			"                const form = executionContext?.getFormContext?.() ?? (Xrm as any).Page;",
			"",
			"                // Read required values",
			"                const quantity = (form.getAttribute(\"udpp_quantity\") as Xrm.Attributes.NumberAttribute)?.getValue() ?? null;",
			"                const itemAttr = form.getAttribute(\"udpp_itemid\") as Xrm.Attributes.LookupAttribute;",
			"",
			"                if (quantity == null) {",
			"                    await Xrm.Navigation.openAlertDialog({ text: \"Enter Quantity.\" });",
			"                    return;",
			"                }",
			"",
			"                const itemVal = itemAttr?.getValue() as Xrm.LookupValue[] | null;",
			"                if (!itemVal || !itemVal.length) {",
			"                    await Xrm.Navigation.openAlertDialog({ text: \"Select Item.\" });",
			"                    return;",
			"                }",
			"",
			"                const id = itemVal[0].id.replace(/[{}]/g, \"\");",
			"                const logicalName = itemVal[0].entityType; // e.g. \"udpp_warehouseitem\"",
			"",
			"                // Fetch available quantity from the selected item",
			"                const itemRecord = await Xrm.WebApi.retrieveRecord(logicalName, id, \"?$$select=udpp_availablequantity\");",
			"                const available: number = (itemRecord as any)?.udpp_availablequantity ?? 0;",
			"",
			"                // Block if insufficient stock",
			"                if (available < quantity) {",
			"                    await Xrm.Navigation.openErrorDialog({",
			"                        message: `Not enough product in stock. Available: ${${available}}, requested: ${${quantity}}.`",
			"                    });",
			"                    return;",
			"                }",
			"",
			"                // Deduct and persist the item update",
			"                await Xrm.WebApi.updateRecord(logicalName, id, { udpp_availablequantity: available - quantity });",
			"",
			"                // Proceed with creation and close logic",
			"                await Actions.saveAndCloseDialog(executionContext);",
			"",
			"            } catch (e: any) {",
			"                await Xrm.Navigation.openErrorDialog({ message: e?.message ?? String(e) });",
			"            }",
			"        }",
			"",
			"        private static async saveAndCloseDialog(executionContext?: Xrm.Events.EventContext): Promise<void> {",
			"            try {",
			"                const form = executionContext?.getFormContext?.() ?? (Xrm as any).Page;",
			"",
			"                // 1) Read dialog field values (logical names from FormXml)",
			"                const name = (form.getAttribute(\"udpp_name\") as Xrm.Attributes.StringAttribute)?.getValue() ?? \"\";",
			"                const quantity = (form.getAttribute(\"udpp_quantity\") as Xrm.Attributes.NumberAttribute)?.getValue() ?? null;",
			"                const paymentMethod = (form.getAttribute(\"udpp_paymentmethod\") as Xrm.Attributes.OptionSetAttribute)?.getValue() ?? null;",
			"",
			"                // lookup",
			"                const itemAttr = form.getAttribute(\"udpp_itemid\") as Xrm.Attributes.LookupAttribute;",
			"",
			"                // Minimal validation",
			"                if (!name) {",
			"                    await Xrm.Navigation.openAlertDialog({ text: \"Enter Name.\" });",
			"                    return;",
			"                }",
			"                if (quantity == null) {",
			"                    await Xrm.Navigation.openAlertDialog({ text: \"Enter Quantity.\" });",
			"                    return;",
			"                }",
			"",
			"                // 2) Prepare payload for createRecord",
			"                const payload: any = {",
			"                    udpp_name: name,",
			"                    udpp_quantity: quantity,",
			"                    udpp_paymentmethod: paymentMethod // optionset (can be null if optional)",
			"                };",
			"",
			"                // 3) Bind lookup udpp_itemid (generic, without hardcoding EntitySet)",
			"                const itemVal = itemAttr?.getValue() as Xrm.LookupValue[] | null;",
			"                if (itemVal && itemVal.length) {",
			"                    const id = itemVal[0].id.replace(/[{}]/g, \"\");",
			"                    const logicalName = itemVal[0].entityType; // e.g. \"udpp_item\"",
			"                    const meta = await Xrm.Utility.getEntityMetadata(logicalName, [\"EntitySetName\"]);",
			"                    payload[\"udpp_itemid@odata.bind\"] = `/${meta.EntitySetName}($${id})`;",
			"                }",
			"",
			"                // 4) Create udpp_warehousetransaction record",
			"                const createRes = await Xrm.WebApi.createRecord(\"udpp_warehousetransaction\", payload);",
			"",
			"                // Close dialog robustly (UCI dialog form or popup)",
			"                if ((form as any)?.ui?.close && typeof (form as any).ui.close === \"function\") {",
			"                    (form as any).ui.close();",
			"                } else if ((Xrm as any)?.Navigation?.close && typeof (Xrm as any).Navigation.close === \"function\") {",
			"                    (Xrm as any).Navigation.close();",
			"                } else {",
			"                    window.close();",
			"                }",
			"            } catch (e: any) {",
			"                await Xrm.Navigation.openErrorDialog({",
			"                    message: e?.message ?? String(e)",
			"                });",
			"            }",
			"        }",
			"    }",
			"",
			"    // Backward compatibility: keep old exported function symbol",
			"    export const saveAndClose = Actions.saveAndClose;",
			"}"
		]
	},
	"Create Web Resource for Compiled Script": {
		"scope": "powershell",
		"prefix": "CFI17-create-webresource",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║            CFI12: Build and Create Web Resource for Compiled Script                    ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Builds the solution to produce compiled JavaScript and then creates a web resource.",
			"# It also registers a dialog event handler for the Save button that persists the record.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Build the solution so the compiled JS is available",
			"dotnet build",
			"",
			"# Step 2: Create the web resource from compiled JS",
			"dotnet new pp-webresource `",
			"--output \"src/Solutions.UI\" `",
			"--WebResourceItemPath \"TS\\build\\udpp_main.js\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Step 3: Register dialog button event handler (onclick) to save the record",
			"dotnet new pp-form-event-handler  `",
			"--output \"src/Solutions.UI\"  `",
			"--AttributeName \"${${publisherPrefix}}_savebutton\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--FunctionName \"UdppDialog.Actions.saveAndClose\" `",
			"--LibraryName \"${${publisherPrefix}}_${${publisherPrefix}}_main\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--EventType \"onclick\" `",
			"--allow-scripts yes"
		]
	},
}