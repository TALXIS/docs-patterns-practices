{
	"Create UI Solution and Add Existing Tables": {
		"scope": "powershell",
		"prefix": "CFI01-ui-solution-entities",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║         CFI01: Create UI Solution and Add Existing Tables from Data Model              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script initializes a new UI solution and links existing tables (entities) that",
			"# were defined in the data model project. This separation ensures clean layering between",
			"# data and presentation components of the solution.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the UI layer solution project.",
			"dotnet new pp-solution `",
			"--output \"src/Solutions.UI\" `",
			"--PublisherName \"$${publisherPrefix}\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add the solution project to the Package Deployer project as a .NET ProjectReference item.",
			"cd src/Packages.Main",
			"pac package add-reference --path ../Solutions.UI/",
			"cd ../..",
			"",
			"# Step 3: Link existing entities from the data model.",
			"dotnet new pp-entity `",
			"--output \"src/Solutions.UI\" `",
			"--Behavior \"Existing\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--LogicalName \"warehouseitem\" `",
			"--DisplayName \"Warehouse Item\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-entity `",
			"--output \"src/Solutions.UI\" `",
			"--Behavior \"Existing\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--LogicalName \"warehousetransaction\" `",
			"--DisplayName \"Warehouse Transaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes"
		]
	},
	"Create Model-Driven App and Add Entities to App": {
		"scope": "powershell",
		"prefix": "CFI02-ui-app-model",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║        CFI02: Create Model-Driven App and Register Entity Components                   ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script creates a model-driven application and registers each entity as a component",
			"# of the app. These components control what data and forms are shown within the app shell.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the model-driven app project.",
			"dotnet new pp-app-model `",
			"--output \"src/Solutions.UI\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--LogicalName \"warehouseapp\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"dotnet sln add src/Solutions.UI",
			"",
			"# Step 2: Add both entities to the app as components.",
			"dotnet new pp-app-model-component `",
			"--output \"src/Solutions.UI\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-app-model-component `",
			"--output \"src/Solutions.UI\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes"
		]
	},
	"Add Sitemap Navigation to App": {
		"scope": "powershell",
		"prefix": "CFI03-ui-sitemap",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                  CFI03: Add Sitemap Structure (Area, Group, Subareas)                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds a sitemap to the WarehouseApp with an area, a group, and two subareas. This controls",
			"# the navigation in the app interface and enables users to access the linked entities.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add sitemap area.",
			"dotnet new pp-sitemap-area `",
			"--output \"src/Solutions.UI\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add group inside the area.",
			"dotnet new pp-sitemap-group `",
			"--output \"src/Solutions.UI\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"# Step 3: Add subareas for both entities.",
			"dotnet new pp-sitemap-subarea `",
			"--output \"src/Solutions.UI\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehouseitem\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-sitemap-subarea `",
			"--output \"src/Solutions.UI\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes"
		]
	},
	"Create Main Forms for Entities": {
		"scope": "powershell",
		"prefix": "CFI04-ui-forms",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                        CFI04: Create Main Forms for Entities                          ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Forms define how users interact with each entity. This step creates new empty main forms",
			"# for both Warehouse Item and Warehouse Transaction entities.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Generate GUIDs for forms (to be reused in the next step).",
			"$$warehouseitemFormGuid = [guid]::NewGuid()",
			"$$warehousetransactionFormGuid = [guid]::NewGuid()",
			"",
			"# Create empty 'main' forms for each entity.",
			"dotnet new pp-entity-form  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\" `",
			"--SolutionRootPath \"Declarations\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\"  `",
			"--FormId $$warehouseitemFormGuid  `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-entity-form  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"dialog\" `",
			"--SolutionRootPath \"Declarations\"  `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\"  `",
			"--FormId $$warehousetransactionFormGuid  `",
			"--allow-scripts yes",
			"",
			"# We also need to add these as components to the app",
			"",
			"dotnet new pp-app-model-component `",
			"--output \"src/Solutions.UI\" `",
			"--EntityType \"Form\" `",
			"--ComponentId \"$$warehouseitemFormGuid\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
			"",
			"dotnet new pp-app-model-component `",
			"--output \"src/Solutions.UI\" `",
			"--EntityType \"Form\" `",
			"--ComponentId \"$$warehouseitemFormGuid\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AppName \"${${publisherPrefix}}_warehouseapp\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Add Tabs to Entity Forms": {
		"scope": "powershell",
		"prefix": "CFI05-ui-form-fields",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                     CFI05: Add Tabs to Main Forms                                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds tabs to the forms created earlier using the pre-generated GUIDs.",
			"# Ensure CFI04 has been executed and form GUID variables are in scope.",
			"#",
			"# Form Structure Hierarchy:",
			"# ┌─────────────────────────────────────────────────────────────────────────────────────┐",
			"# │ Form                                                                                │",
			"# │ ├─ Tab (CFI05)                                                                      │",
			"# │   ├─ Column (CFI06)                                                                 │",
			"# │     ├─ Section (CFI06)                                                              │",
			"# │       ├─ Row (CFI06)                                                                │",
			"# │         ├─ Cell (CFI07)                                                             │",
			"# │           └─ Control (CFI08)                                                        │",
			"# └─────────────────────────────────────────────────────────────────────────────────────┘",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"dotnet new pp-form-tab  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--RemoveDefaultTab \"True\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-tab  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"dialog\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--RemoveDefaultTab \"True\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Add colummns, sections and rows to Entity Forms": {
		"scope": "powershell",
		"prefix": "CFI06-ui-form-columns-sections-rows",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                     CFI06: Add colummns, sections and rows to Main Forms              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds columns, sections and rows to the forms created earlier using the pre-generated GUIDs.",
			"# This step creates the structural foundation for form layout before adding cells and controls.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add column to the form.",
			"dotnet new pp-form-column  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-column  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add section to the form.",
			"dotnet new pp-form-section  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-section  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Step 3: Add rows to the form.",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-row  `",
			"--output \"src/Solutions.UI\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Add Cells to Entity Forms": {
		"scope": "powershell",
		"prefix": "CFI07-ui-form-cells",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                        CFI07: Add Cells to Entity Forms                                 ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds cells to the forms created earlier using the pre-generated GUIDs.",
			"# Cells define the layout structure within rows and contain the actual form controls.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Add cells for Warehouse Item entity form",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"1\"  `",
			"--FormType \"main\"  `",
			"--DisplayName \"Name\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"2\"  `",
			"--FormType \"main\"  `",
			"--DisplayName \"Available Quantity\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"3\"  `",
			"--FormType \"main\"  `",
			"--DisplayName \"Package Type\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Add cells for Warehouse Transaction entity form",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"1\"  `",
			"--DisplayName \"Name\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"2\"  `",
			"--DisplayName \"Quantity\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"3\"  `",
			"--DisplayName \"Item\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-cell  `",
			"--output \"src/Solutions.UI\"  `",
			"--RowIndex \"4\"  `",
			"--DisplayName \"Payment Method\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes"
		]
	},
	"Add Cell Controls to Entity Forms": {
		"scope": "powershell",
		"prefix": "CFI08-ui-form-controls",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                    CFI08: Add Cell Controls to Entity Forms                           ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds cell controls to the forms created earlier using the pre-generated GUIDs.",
			"# Cell controls bind the actual entity attributes to the form cells for data input/display.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Add cell controls for Warehouse Item entity form",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"Text\"  `",
			"--RowIndex \"1\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_name\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"WholeNumber\"  `",
			"--RowIndex \"2\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_availablequantity\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"OptionSet\"  `",
			"--RowIndex \"3\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_packagetype\"  `",
			"--FormType \"main\"  `",
			"--FormId $$warehouseitemFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehouseitem\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Add cell controls for Warehouse Transaction entity form",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"Text\"  `",
			"--RowIndex \"1\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_name\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"WholeNumber\"  `",
			"--RowIndex \"2\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_quantity\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"Lookup\"  `",
			"--RowIndex \"3\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_itemid\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"dotnet new pp-form-control  `",
			"--output \"src/Solutions.UI\"  `",
			"--ControlType \"OptionSet\"  `",
			"--RowIndex \"4\"  `",
			"--AttributeLogicalName \"${${publisherPrefix}}_paymentmethod\"  `",
			"--FormId $$warehousetransactionFormGuid `",
			"--EntitySchemaName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes"
		]
	},
	"CFI10-add-ribbon-button": {
		"scope": "powershell",
		"prefix": "CFI10-add-ribbon-button",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFI10: Add Ribbon Button to Warehouse Transaction Dialog                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Adds a ribbon button to the warehouse transaction dialog form.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Add ribbon button to warehouse transaction dialog form",
			"dotnet new pp-ribbon-button `",
			"--output \"src/Solutions.UI\" `",
			"--Location \"Home\" `",
			"--EntityLogicalName \"${${publisherPrefix}}_warehousetransaction\" `",
			"--ButtonLable \"Create Warehouse Transaction\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
		]
	},
	"Create Script Library in UI Solution": {
		"scope": "powershell",
		"prefix": "CFI09-create-script-library",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                    CFI09: Create Script Library in UI Solution                         ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script creates a Power Platform Script Library within the existing UI solution.",
			"# Script libraries are used for client-side logic, ribbon customizations,",
			"# and form interactions in Power Platform applications.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the Script Library in the existing UI solution",
			"dotnet new pp-script-library `",
			"--output \"src/Solutions.UI\" `",
			"--LibraryName \"main\" `",
			"--PublisherPrefix \"$${publisherPrefix}\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Create TypeScript files for warehouse transaction functionality",
			"mkdir src/Solutions.UI/TS/scripts",
			"",
			"# Create file for opening warehouse transaction dialog",
			"New-Item -Path \"src/Solutions.UI/TS/scripts\" -Name \"OpenWarehouseTransactionDialog.ts\" -ItemType \"File\" | Out-Null",
			"",
			"# Create file for saving warehouse transaction data",
			"New-Item -Path \"src/Solutions.UI/TS/scripts\" -Name \"SaveWarehouseTransactionData.ts\" -ItemType \"File\" | Out-Null",
			"",
			"# Add placeholder comments to trigger snippet suggestions",
			"\"// type CFI10 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"src/Solutions.UI/TS/scripts/OpenWarehouseTransactionDialog.ts\"",
			"\"// type CFI11 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"src/Solutions.UI/TS/scripts/SaveWarehouseTransactionData.ts\"",
			"",
			"# Open files in VS Code for editing",
			"code \"src/Solutions.UI/TS/scripts/OpenWarehouseTransactionDialog.ts\"",
			"code \"src/Solutions.UI/TS/scripts/SaveWarehouseTransactionData.ts\""
		]
	},
	"Open Warehouse Transaction Dialog Script": {
		"scope": "typescript",
		"prefix": "CFI10-open-dialog-script",
		"body": [
			"// ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"// ║              CFI10: Open Warehouse Transaction Dialog from Ribbon Button              ║",
			"// ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"//",
			"// This TypeScript function opens the warehouse transaction dialog form when called",
			"// from a ribbon button. It uses the Xrm.Navigation API to open the dialog form.",
			"//",
			"// The dialog form was created in CFI04-ui-forms with FormType \"dialog\"",
			"//",
			"// ──────────────────────────────────────────────────────────────────────────────────────────",
			"//                                        Function",
			"// ──────────────────────────────────────────────────────────────────────────────────────────",
			"",
			"export function openWarehouseTransactionDialog(): void {",
			"    try {",
			"        // Get the current record context",
			"        const formContext = Xrm.Utility.getGlobalContext();",
			"        ",
			"        // Define the dialog parameters",
			"        const dialogOptions: Xrm.Navigation.DialogOptions = {",
			"            pageType: \"custom\",",
			"            name: \"${1:publisherPrefix}_warehousetransaction\",",
			"            data: {",
			"                // Pre-populate form fields if needed",
			"                \"${1:publisherPrefix}_name\": \"New Transaction\",",
			"                \"${1:publisherPrefix}_quantity\": 1",
			"            }",
			"        };",
			"        ",
			"        // Open the dialog",
			"        Xrm.Navigation.openDialog(dialogOptions).then(",
			"            function (result) {",
			"                // Handle dialog result",
			"                if (result && result.savedEntityReference) {",
			"                    console.log(\"Dialog saved successfully:\", result.savedEntityReference);",
			"                    ",
			"                    // Refresh the current form if needed",
			"                    Xrm.Page.data.refresh();",
			"                }",
			"            },",
			"            function (error) {",
			"                console.error(\"Error opening dialog:\", error);",
			"                Xrm.Navigation.openAlertDialog({",
			"                    title: \"Error\",",
			"                    text: \"Failed to open warehouse transaction dialog.\"",
			"                });",
			"            }",
			"        );",
			"    }",
			"    catch (error) {",
			"        console.error(\"Exception in openWarehouseTransactionDialog:\", error);",
			"        Xrm.Navigation.openAlertDialog({",
			"            title: \"Error\",",
			"            text: \"An unexpected error occurred.\"",
			"        });",
			"    }",
			"}",
			"",
			"// Alternative method using Xrm.Utility.openEntityForm for standard forms",
			"export function openWarehouseTransactionForm(): void {",
			"    try {",
			"        const formParameters: any = {",
			"            \"${1:publisherPrefix}_name\": \"New Transaction\",",
			"            \"${1:publisherPrefix}_quantity\": 1",
			"        };",
			"        ",
			"        Xrm.Utility.openEntityForm(",
			"            \"${1:publisherPrefix}_warehousetransaction\",",
			"            null, // entityId for new record",
			"            formParameters",
			"        );",
			"    }",
			"    catch (error) {",
			"        console.error(\"Exception in openWarehouseTransactionForm:\", error);",
			"        Xrm.Navigation.openAlertDialog({",
			"            title: \"Error\",",
			"            text: \"Failed to open warehouse transaction form.\"",
			"        });",
			"    }",
			"}"
		]
	},
	"Save Warehouse Transaction Data Script": {
		"scope": "typescript",
		"prefix": "CFI11-save-data-script",
		"body": [
			"// ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"// ║                CFI11: Save Warehouse Transaction Data from Form Button                ║",
			"// ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"//",
			"// This TypeScript function saves the warehouse transaction data when called from a form button.",
			"// It validates the form data, creates a new warehouse transaction record, and handles errors.",
			"//",
			"// This function should be called from a button in the warehouse transaction dialog form",
			"// created in CFI04-ui-forms",
			"//",
			"// ──────────────────────────────────────────────────────────────────────────────────────────",
			"//                                        Function",
			"// ──────────────────────────────────────────────────────────────────────────────────────────",
			"",
			"export function saveWarehouseTransactionData(): void {",
			"    try {",
			"        // Get the form context",
			"        const formContext = Xrm.Page;",
			"        ",
			"        // Validate required fields",
			"        if (!validateFormData(formContext)) {",
			"            return;",
			"        }",
			"        ",
			"        // Get form data",
			"        const formData = getFormData(formContext);",
			"        ",
			"        // Show loading indicator",
			"        Xrm.Utility.showProgressIndicator(\"Saving warehouse transaction...\");",
			"        ",
			"        // Create the warehouse transaction record",
			"        Xrm.WebApi.createRecord(\"${1:publisherPrefix}_warehousetransaction\", formData).then(",
			"            function (result) {",
			"                Xrm.Utility.closeProgressIndicator();",
			"                ",
			"                console.log(\"Warehouse transaction created successfully:\", result);",
			"                ",
			"                // Show success message",
			"                Xrm.Navigation.openAlertDialog({",
			"                    title: \"Success\",",
			"                    text: \"Warehouse transaction saved successfully!\"",
			"                }).then(",
			"                    function () {",
			"                        // Close the dialog and return the created record",
			"                        Xrm.Navigation.closeDialog({",
			"                            savedEntityReference: {",
			"                                entityType: \"${1:publisherPrefix}_warehousetransaction\",",
			"                                id: result.id",
			"                            }",
			"                        });",
			"                    }",
			"                );",
			"            },",
			"            function (error) {",
			"                Xrm.Utility.closeProgressIndicator();",
			"                ",
			"                console.error(\"Error creating warehouse transaction:\", error);",
			"                ",
			"                // Show error message",
			"                Xrm.Navigation.openAlertDialog({",
			"                    title: \"Error\",",
			"                    text: `Failed to save warehouse transaction: ${error.message || 'Unknown error'}`",
			"                });",
			"            }",
			"        );",
			"    }",
			"    catch (error) {",
			"        Xrm.Utility.closeProgressIndicator();",
			"        console.error(\"Exception in saveWarehouseTransactionData:\", error);",
			"        ",
			"        Xrm.Navigation.openAlertDialog({",
			"            title: \"Error\",",
			"            text: \"An unexpected error occurred while saving.\"",
			"        });",
			"    }",
			"}",
			"",
			"// Helper function to validate form data",
			"function validateFormData(formContext: Xrm.Page): boolean {",
			"    try {",
			"        // Get required fields",
			"        const nameField = formContext.getControl(\"${1:publisherPrefix}_name\");",
			"        const quantityField = formContext.getControl(\"${1:publisherPrefix}_quantity\");",
			"        const itemField = formContext.getControl(\"${1:publisherPrefix}_itemid\");",
			"        const paymentMethodField = formContext.getControl(\"${1:publisherPrefix}_paymentmethod\");",
			"        ",
			"        // Validate name field",
			"        if (!nameField || !nameField.getValue()) {",
			"            Xrm.Navigation.openAlertDialog({",
			"                title: \"Validation Error\",",
			"                text: \"Please enter a name for the transaction.\"",
			"            });",
			"            return false;",
			"        }",
			"        ",
			"        // Validate quantity field",
			"        if (!quantityField || !quantityField.getValue() || quantityField.getValue() <= 0) {",
			"            Xrm.Navigation.openAlertDialog({",
			"                title: \"Validation Error\",",
			"                text: \"Please enter a valid quantity greater than 0.\"",
			"            });",
			"            return false;",
			"        }",
			"        ",
			"        // Validate item field",
			"        if (!itemField || !itemField.getValue()) {",
			"            Xrm.Navigation.openAlertDialog({",
			"                title: \"Validation Error\",",
			"                text: \"Please select an item for the transaction.\"",
			"            });",
			"            return false;",
			"        }",
			"        ",
			"        // Validate payment method field",
			"        if (!paymentMethodField || !paymentMethodField.getValue()) {",
			"            Xrm.Navigation.openAlertDialog({",
			"                title: \"Validation Error\",",
			"                text: \"Please select a payment method.\"",
			"            });",
			"            return false;",
			"        }",
			"        ",
			"        return true;",
			"    }",
			"    catch (error) {",
			"        console.error(\"Error validating form data:\", error);",
			"        return false;",
			"    }",
			"}",
			"",
			"// Helper function to get form data",
			"function getFormData(formContext: Xrm.Page): any {",
			"    try {",
			"        const formData: any = {};",
			"        ",
			"        // Get name",
			"        const nameField = formContext.getAttribute(\"${1:publisherPrefix}_name\");",
			"        if (nameField && nameField.getValue()) {",
			"            formData[\"${1:publisherPrefix}_name\"] = nameField.getValue();",
			"        }",
			"        ",
			"        // Get quantity",
			"        const quantityField = formContext.getAttribute(\"${1:publisherPrefix}_quantity\");",
			"        if (quantityField && quantityField.getValue()) {",
			"            formData[\"${1:publisherPrefix}_quantity\"] = quantityField.getValue();",
			"        }",
			"        ",
			"        // Get item reference",
			"        const itemField = formContext.getAttribute(\"${1:publisherPrefix}_itemid\");",
			"        if (itemField && itemField.getValue()) {",
			"            formData[\"${1:publisherPrefix}_itemid@odata.bind\"] = `/${1:publisherPrefix}_warehouseitems(${itemField.getValue()[0].id})`;",
			"        }",
			"        ",
			"        // Get payment method",
			"        const paymentMethodField = formContext.getAttribute(\"${1:publisherPrefix}_paymentmethod\");",
			"        if (paymentMethodField && paymentMethodField.getValue()) {",
			"            formData[\"${1:publisherPrefix}_paymentmethod\"] = paymentMethodField.getValue();",
			"        }",
			"        ",
			"        return formData;",
			"    }",
			"    catch (error) {",
			"        console.error(\"Error getting form data:\", error);",
			"        return {};",
			"    }",
			"}"
		]
	}
	
}