{
	"Delete the environment and repository": {
		"scope": "powershell",
		"prefix": "CFZ99-delete-environment",
		"body": [
			"pac admin delete --environment \"\\$devEnvUrl\"",
			"pac admin delete --environment \"\\$uatEnvUrl\"",
			"",
			"az repos delete --id \\$repositoryId --yes --project \"\\$adoProjectName\"",
			"az devops project delete --yes --id \\$projectId",
			"az ad app delete --id \\$appRegistrationId",
			"az ad app delete --id $$testUserServicePrincipal.appId"
		]
	},
	"Create a form, create a onload script": {
		"scope": "powershell",
		"prefix": "CFZ98-create-form-script",
		"body": [
			"# CFZ98",
			"# Create a form, create a onload script",
			"cd Solutions.UI/Declarations/Entities/${1:publisherPrefix}_xyz/FormXml",
			"dotnet new pp-form --EntityName \"\" --DisplayName \"Solutions.UI\" --PublisherName \"tomas\" --PublisherPrefix \"tom\" --allow-scripts yes",
			"",
			"dotnet new pp-script-library",
			"",
			"# Implement the onload function",
			"# Register an event handler in the form"
		]
	},
	"Create a Dataverse App User from the service prondipal and assign a security role": {
		"scope": "powershell",
		"prefix": "CFZ06-add-spn-user",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║               CFZ06: Create a Dataverse App User for the service principal             ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script creates a Dataverse user for a Service Principal (SPN). It dynamically detects",
			"# the Business Unit and System Administrator role by querying the current user context, making",
			"# the process more automated and robust for CI/CD environments.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                     Parameters",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"$$testClientId = $$testUserServicePrincipal.appId  # Entra ID Application (client) ID",
			"",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                          Step 1: Get Auth Token + WhoAmI Info",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"$$devEnvAccessToken = (Get-AzAccessToken -ResourceUrl $$devEnvUrl).Token",
			"",
			"$$whoAmIUrl = \"$$devEnvUrl/api/data/v9.2/WhoAmI\"",
			"$$whoAmIResponse = Invoke-RestMethod -Uri $$whoAmIUrl -Method Get -Headers @{",
			"    \"Authorization\"     = \"Bearer $$devEnvAccessToken\"",
			"}",
			"",
			"$$businessUnitId = $$whoAmIResponse.BusinessUnitId",
			"$$userId = $$whoAmIResponse.UserId",
			"",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                  Step 2: Resolve 'System Administrator' Role ID",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"$$userUrl = \"$$devEnvUrl/api/data/v9.2/systemusers($$userId)?`$$expand=systemuserroles_association(`$$select=name,roleid)\"",
			"$$userResponse = Invoke-RestMethod -Uri $$userUrl -Method Get -Headers @{",
			"    \"Authorization\"     = \"Bearer $$devEnvAccessToken\"",
			"}",
			"",
			"$$systemAdminRole = $$userResponse.systemuserroles_association | Where-Object { $$_.name -ieq \"System Administrator\" }",
			"$$roleId = $$systemAdminRole.roleid",
			"",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#               Step 3: Create New SPN-Linked SystemUser in Dataverse",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"$$headers = @{",
			"    Authorization       = \"Bearer $$devEnvAccessToken\"",
			"    \"Content-Type\"     = \"application/json\"",
			"    \"Prefer\"           = \"return=representation\"",
			"}",
			"",
			"$$createBody = @{",
			"    applicationid = $$testClientId",
			"    isdisabled = $$false",
			"    accessmode = 4",
			"    \"businessunitid@odata.bind\" = \"/businessunits($$businessUnitId)\"",
			"} | ConvertTo-Json -Depth 3",
			"",
			"$$createUserResponse = Invoke-RestMethod -Uri \"$$devEnvUrl/api/data/v9.0/systemusers\" -Method Post -Headers $$headers -Body $$createBody",
			"$$userId = $$createUserResponse.systemuserid",
			"",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                          Step 4: Assign Security Role to User",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"$$associationUri = \"$$devEnvUrl/api/data/v9.0/systemusers($$userId)/systemuserroles_association/`$$ref\"",
			"$$body = @{",
			"    \"@odata.id\" = \"$$devEnvUrl/api/data/v9.0/roles($$roleId)\"",
			"} | ConvertTo-Json -Compress",
			"",
			"$$associationResponse = Invoke-RestMethod -Method Post -Uri $$associationUri -Headers $$headers -Body $$body"
		]
	},
	"Import solution to Dataverse (macOS)": {
		"scope": "powershell",
		"prefix": "CFZ03-mac-import-solution",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║             CFZ03 (macOS): Import solution to your Dataverse environment               ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Use this script on macOS to import individual solutions into Dataverse (package deployer not supported).",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Build the repository (as unmanaged solutions).",
			"dotnet publish",
			"",
			"# Step 2: Import each solution manually into Dataverse.",
			"",
			"cd \"./src/Solutions.DataModel/\"",
			"pac solution import",
			"cd ../..",
			"",
			"cd \"./src/Solutions.UI/\"",
			"pac solution import",
			"cd ../..",
			"",
			"cd \"./src/Solutions.Security/\"",
			"pac solution import",
			"cd ../..",
			"",
			"cd \"./src/Solutions.Logic/\"",
			"pac solution import",
			"cd ../..",
			"",
			"# Step 3: Publish All Customizations",
			"pac solution publish",
			"",
			"# Step 4: Open the Power Apps Maker in the web browser.",
			"pac tool maker"
		]
	},
	"Initialize a new PCF control project": {
		"scope": "powershell",
		"prefix": "CFZ01-init-pcf-control-project",
		"body": [
			"# CFZ01",
			"# Initialize a new PCF control project",
			"pac pcf init `",
			"--namespace tom `",
			"--name Calendar `",
			"--template field `",
			"--framework react `",
			"--run-npm-install `",
			"--outputDirectory \"src/Controls.Calendar\"",
			"",
			"cd \"src/Controls.Calendar\"",
			"# Add the missing project type ID to the .pcfproj to make dotnet accept the custom project type",
			"\\$csproj = Get-ChildItem -Path . -Filter *.pcfproj | Select-Object -First 1; [xml]\\$xml = Get-Content \\$csproj.FullName -Raw; \\$propertyGroup = \\$xml.Project.PropertyGroup | Select-Object -First 1; \\$newElement = \\$xml.CreateElement('DefaultProjectTypeGuid', \\$xml.Project.NamespaceURI); \\$newElement.InnerText = 'FAE04EC0-301F-11D3-BF4B-00C04F79EFBC'; \\$propertyGroup.AppendChild(\\$newElement) > \\$null; \\$xml.Save(\\$csproj.FullName)",
			"",
			"cd ../..",
			"dotnet sln add \"src/Controls.Calendar/Controls.Calendar.pcfproj\""
		]
	},
	"Initialize a new solution for PCF controls and add the control to it": {
		"scope": "powershell",
		"prefix": "CFZ02-init-pcf-solution-project",
		"body": [
			"# CFZ02",
			"# Initialize a new solution for PCF controls",
			"pac solution init --publisher-name tomas --publisher-prefix tom --outputDirectory \"Solutions.Controls\"",
			"cd \"Solutions.Controls\"",
			"",
			"${1:CFA06-rename-src-folder-remove-gitignore}",
			"",
			"${2:CFA07-patch-csproj}",
			"",
			"${3:CFA08-switch-type-sanitize-solution-name}",
			"",
			"# Add the project to the previously created Visual Studio solution",
			"dotnet sln ../../ add Solutions.Controls.cdsproj",
			"",
			"# Add the control to the solution",
			"pac solution add-reference --path ../Controls.Calendar",
			"# Add the new Controls solution to the package",
			"cd ..",
			"cd Packages.Main",
			"pac package add-reference --path \"../Solutions.Controls/\"",
			"",
			"cd ../.."
		]
	},
	"Upgrade React and install React Big Calendar": {
		"scope": "powershell",
		"prefix": "CFZ03-upgrade-react-install-calendar",
		"body": [
			"# CFZ03",
			"# Upgrade React and install React Big Calendar",
			"cd \"src/Controls.Calendar\"",
			"npm install react@17",
			"npm install react-dom@17",
			"npm install @types/react@17",
			"npm install @types/react-dom@17",
			"npm install react-big-calendar",
			"npm install moment",
			"npm i --save-dev @types/react-big-calendar",
			"",
			"# Enable esModuleInterop in tsconfig.json",
			"# tsconfig.json > compilerOptions > \"esModuleInterop\": true",
			"",
			"cd ../.."
		]
	},
	"Calendar React component": {
		"scope": "typescript,typescriptreact",
		"prefix": "CFZ04-calendar-react-component",
		"body": [
			"// CFZ04",
			"import * as React from 'react';",
			"import { Calendar, momentLocalizer, Views } from \"react-big-calendar\";",
			"import \"react-big-calendar/lib/css/react-big-calendar.css\";",
			"import moment from 'moment';",
			"",
			"export interface ICalendarComponentProps {",
			"\tname?: string;",
			"}",
			"",
			"const localizer = momentLocalizer(moment);",
			"",
			"// Sample events data for the current week",
			"const events = [",
			"\t{",
			"\t\tid: 0,",
			"\t\ttitle: 'Team Meeting',",
			"\t\tstart: new Date(new Date().setHours(new Date().getHours() + 1)),",
			"\t\tend: new Date(new Date().setHours(new Date().getHours() + 2))",
			"\t},",
			"\t{",
			"\t\tid: 1,",
			"\t\ttitle: 'Project Review',",
			"\t\tstart: new Date(new Date().setDate(new Date().getDate() + 1)),",
			"\t\tend: new Date(new Date().setDate(new Date().getDate() + 1)).setHours(new Date().getHours() + 1)",
			"\t},",
			"\t{",
			"\t\tid: 2,",
			"\t\ttitle: 'Client Call',",
			"\t\tstart: new Date(new Date().setDate(new Date().getDate() + 2)),",
			"\t\tend: new Date(new Date().setDate(new Date().getDate() + 2)).setHours(new Date().getHours() + 1)",
			"\t}",
			"];",
			"",
			"export class CalendarComponent extends React.Component<ICalendarComponentProps> {",
			"\tpublic render(): React.ReactNode {",
			"\t\treturn (",
			"\t\t\t<Calendar",
			"\t\t\tlocalizer={localizer}",
			"\t\t\tevents={events}",
			"\t\t\tstartAccessor=\"start\"",
			"\t\t\tendAccessor=\"end\"",
			"\t\t\tstyle={{ height: \"100%\" }}",
			"\t\t\tdefaultView={Views.WEEK}",
			"\t\t/>",
			"\t\t)",
			"\t}",
			"}"
		]
	},
	"Import the Controls solution to your Dataverse dev environment": {
		"scope": "powershell",
		"prefix": "CFZ06-import-solution-to-dev-env",
		"body": [
			"# CFZ06",
			"# Build the whole repository",
			"dotnet build",
			"",
			"# Import the locally built solutions to Dataverse so we can make modifications in the Power Apps Maker",
			"cd \"./src/Solutions.Controls/\"",
			"pac solution import",
			"cd ../.."
		]
	},
	"Bump the PCF version, push the control to the environment and publish it": {
		"scope": "powershell",
		"prefix": "CFZ06-push-pcf",
		"body": [
			"# CFI06",
			"# Bump the PCF version, push the control to the environment and publish it",
			"pac pcf version --patchversion ${1:1}",
			"pac pcf push --publisher-prefix ${2:tom}",
			"pac solution publish"
		]
	},
	"Catalog commands": {
		"scope": "powershell",
		"prefix": "CFZ07-catalog",
		"body": [
			"",
		]
	},
}