{
	"Create a Dataverse solution project for business logic": {
		"scope": "powershell",
		"prefix": "CFI01-create-logic-solution",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║               CFI01: Create a Dataverse solution project for business logic            ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This solution will contain all custom business logic for the Dataverse environment.",
			"# It is intended for managing plugins — such as event handlers, validations, and automation",
			"# that are triggered by changes in the Dataverse data.",
			"#",
			"# Templates automatically add new projects to the .sln file.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create a solution project for business logic using the installed template.",
			"dotnet new pp-solution `",
			"--output \"src/Solutions.Logic\" `",
			"--PublisherName \"tomas\" `",
			"--PublisherPrefix \"tom\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Add the solution project to the Package Deployer project as a .NET ProjectReference item.",
			"cd src/Packages.Main",
			"pac package add-reference --path ../Solutions.Logic/",
			"cd ../..",
		]
	},
	"Initialize Plugins.Warehouse plugin project with two handlers": {
		"scope": "powershell",
		"prefix": "CFI02-init-plugins-warehouse",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║       CFI02: Initialize Plugins.Warehouse plugin project with signing and handlers      ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script automates the setup of a new Dataverse plugin project for handling",
			"# warehouse-related operations. It performs the following:",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Script",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"mkdir src/Plugins.Warehouse",
			"",
			"cd src/Plugins.Warehouse",
			"",
			"# Step 1: Locate sn.exe to generate signing key",
			"$$possiblePaths = @(",
			"    \"${${env:env:ProgramFiles(x86)}}\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\sn.exe\",",
			"    \"${${env:env:ProgramFiles(x86)}}\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.7.2 Tools\\sn.exe\",",
			"    \"${${env:env:ProgramFiles(x86)}}\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.7.1 Tools\\sn.exe\",",
			"    \"${${env:env:ProgramFiles(x86)}}\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.7 Tools\\sn.exe\"",
			")",
			"$$snPath = $$possiblePaths | Where-Object { Test-Path $$_ } | Select-Object -First 1",
			"",
			"",
			"# Step 2: Generate key file",
			"$$keyFile = \"PluginKey.snk\"",
			"& $$snPath -k $$keyFile",
			"",
			"cd ../../",
			"",
			"# Step 3: Initialize plugin project",
			"dotnet new pp-plugin `",
			"--output \"src/Plugins.Warehouse\" `",
			"--PublisherName \"tomas\" `",
			"--SigningKeyFilePath \"PluginKey.snk\" `",
			"--Company \"NETWORG\" `",
			"--allow-scripts yes",
			"",
			"# Step 4: Add custom plugin class files",
			"cd src/Plugins.Warehouse",
			"",
			"New-Item -Path . -Name \"ValidateWarehouseTransactionPlugin.cs\" -ItemType \"File\" | Out-Null",
			"New-Item -Path . -Name \"SubtractQuantityPlugin.cs\" -ItemType \"File\" | Out-Null",
			"",
			"\"// type CFI03 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"ValidateWarehouseTransactionPlugin.cs\"",
			"\"// type CFI04 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"SubtractQuantityPlugin.cs\"",
			"",
			"code \"ValidateWarehouseTransactionPlugin.cs\"",
			"code \"SubtractQuantityPlugin.cs\"",
			"cd ../../",
			""
		]
	},
	"Validate Warehouse Transaction Plugin": {
		"scope": "csharp",
		"prefix": "CFI03-validate-warehouse-plugin",
		"body": [
			"// ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"// ║            CFI03: Plugin - Validate Warehouse Transaction Quantity (PreValidation)     ║",
			"// ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"//",
			"// This plugin checks if the requested quantity exceeds available quantity",
			"// for a Warehouse Item and throws an exception if validation fails.",
			"//",
			"// Triggered on: Create → ${1:publisherPrefix}_warehousetransaction",
			"// Stage: PreValidation",
			"using Microsoft.Xrm.Sdk;",
			"using Microsoft.Xrm.Sdk.Query;",
			"using System;",
			"",
			"namespace Plugins.Warehouse",
			"{",
			"    public class ValidateWarehouseTransactionPlugin : PluginBase",
			"    {",
			"        public ValidateWarehouseTransactionPlugin(string unsecureConfiguration, string secureConfiguration)",
			"            : base(typeof(ValidateWarehouseTransactionPlugin))",
			"        {",
			"        }",
			"",
			"        protected override void ExecuteDataversePlugin(ILocalPluginContext localPluginContext)",
			"        {",
			"            if (localPluginContext == null)",
			"            {",
			"                throw new ArgumentNullException(nameof(localPluginContext));",
			"            }",
			"",
			"            var context = localPluginContext.PluginExecutionContext;",
			"            var serviceFactory = localPluginContext.OrgSvcFactory;",
			"            var service = serviceFactory.CreateOrganizationService(context.UserId);",
			"            var tracingService = localPluginContext.TracingService;",
			"",
			"            if (!(context.InputParameters.Contains(\"Target\") && context.InputParameters[\"Target\"] is Entity target) || target.LogicalName != \"${1:publisherPrefix}_warehousetransaction\")",
			"                return;",
			"",
			"            if (!target.Contains(\"${1:publisherPrefix}_quantity\") || !target.Contains(\"${1:publisherPrefix}_itemid\"))",
			"                return;",
			"",
			"            try",
			"            {",
			"                var quantity = (int)target[\"${1:publisherPrefix}_quantity\"];",
			"                var itemRef = (EntityReference)target[\"${1:publisherPrefix}_itemid\"];",
			"",
			"                var item = service.Retrieve(\"${1:publisherPrefix}_warehouseitem\", itemRef.Id, new ColumnSet(\"${1:publisherPrefix}_availablequantity\"));",
			"                var available = (int)item[\"${1:publisherPrefix}_availablequantity\"];",
			"",
			"                int available;",
			"                if (item == null || !item.Contains(\"udpp_availablequantity\"))",
			"                {",
			"                    available = 0;",
			"                }",
			"                else",
			"                {",
			"                    available = (int)item[\"udpp_availablequantity\"];",
			"                }",
			"",
			"                if (quantity > available)",
			"                {",
			"                    throw new InvalidPluginExecutionException($\"Not enough product in stock. Available: {available}, requested: {quantity}.\");",
			"                }",
			"            }",
			"            catch (Exception ex)",
			"            {",
			"                tracingService.Trace(\"Plugin1 Exception: {0}\", ex.ToString());",
			"                throw;",
			"            }",
			"        }",
			"    }",
			"}"
		]
	},
	"Subtract Quantity Plugin": {
		"scope": "csharp",
		"prefix": "CFI04-subtract-quantity-plugin",
		"body": [
			"// ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"// ║         CFI04: Plugin - Subtract Quantity From Available (PostOperation)               ║",
			"// ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"//",
			"// This plugin subtracts the requested quantity from the available quantity of",
			"// a Warehouse Item after a transaction is created.",
			"//",
			"// Triggered on: Create → ${1:publisherPrefix}_warehousetransaction",
			"// Stage: PostOperation",
			"using Microsoft.Xrm.Sdk;",
			"using Microsoft.Xrm.Sdk.Query;",
			"using System;",
			"",
			"namespace Plugins.Warehouse",
			"{",
			"    public class SubtractQuantityPlugin : PluginBase",
			"    {",
			"        public SubtractQuantityPlugin(string unsecureConfiguration, string secureConfiguration)",
			"            : base(typeof(SubtractQuantityPlugin))",
			"        {",
			"        }",
			"",
			"        protected override void ExecuteDataversePlugin(ILocalPluginContext localPluginContext)",
			"        {",
			"            if (localPluginContext == null)",
			"            {",
			"                throw new ArgumentNullException(nameof(localPluginContext));",
			"            }",
			"",
			"            var context = localPluginContext.PluginExecutionContext;",
			"            var serviceFactory = localPluginContext.OrgSvcFactory;",
			"            var service = serviceFactory.CreateOrganizationService(context.UserId);",
			"",
			"            if (!(context.InputParameters[\"Target\"] is Entity target) || target.LogicalName != \"${1:publisherPrefix}_warehousetransaction\")",
			"                return;",
			"",
			"            if (!target.Contains(\"${1:publisherPrefix}_quantity\") || !target.Contains(\"${1:publisherPrefix}_itemid\"))",
			"                return;",
			"",
			"            var quantity = ((int)target[\"${1:publisherPrefix}_quantity\"]);",
			"            var itemRef = (EntityReference)target[\"${1:publisherPrefix}_itemid\"];",
			"",
			"            var item = service.Retrieve(\"${1:publisherPrefix}_warehouseitem\", itemRef.Id, new ColumnSet(\"${1:publisherPrefix}_availablequantity\"));",
			"            var available = ((int)item[\"${1:publisherPrefix}_availablequantity\"]);",
			"",
			"            item[\"${1:publisherPrefix}_availablequantity\"] = available - quantity;",
			"            service.Update(item);",
			"        }",
			"    }",
			"}"
		]
	},
	"Build and Register Plugin in PRT": {
		"scope": "powershell",
		"prefix": "CFI05-register-plugin",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                            CFI05: Register Plugin in PRT                           ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Step 1: Build plugin",
			"   cd src/Plugins.Warehouse",
			"   dotnet build",
			"   cd ../..",
			"#",
			"# Step 2: Prepare unique assembly ID",
			"$$assemblyGuidId = [System.Guid]::NewGuid()",
			"",
			"# Step 3: Register plugin assembly using compiled output",
			"dotnet new pp-plugin-assembly `",
			"--output \"src/Solutions.Logic\" `",
			"--PluginProjectRootPath \"..\\Plugins.Warehouse\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--AssemblyId \"$$assemblyGuidId\" `",
			"--allow-scripts yes",
			"",
		]
	},
	"Add Plugin Assembly to Solution (maker portal)": {
		"scope": "powershell",
		"prefix": "CFI06-add-plugin-ui",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFI06: Add Existing Plugin Assembly to Solution (UI)                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Step 1: Register PostOperation step - SubtractQuantityPlugin",
			"dotnet new pp-plugin-assembly-steps `",
			"--output \"src/Solutions.Logic\" `",
			"--PrimaryEntity \"${${1:publisherPrefix}}_warehousetransaction\" `",
			"--PluginProjectName \"Plugins.Warehouse\" `",
			"--PluginName \"SubtractQuantityPlugin\" `",
			"--Stage \"Post-operation\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--SdkMessage \"Create\" `",
			"--AssemblyId \"$$assemblyGuidId\" `",
			"--FilteringAttributes \"{${${1:publisherPrefix}}_itemid, ${${1:publisherPrefix}}_quantity}\" `",
			"--allow-scripts yes",
			"",
			"# Step 2: Register PreValidation step - ValidateWarehouseTransactionPlugin",
			"dotnet new pp-plugin-assembly-steps `",
			"--output \"src/Solutions.Logic\" `",
			"--PrimaryEntity \"${${1:publisherPrefix}}_warehousetransaction\" `",
			"--PluginProjectName \"Plugins.Warehouse\" `",
			"--PluginName \"ValidateWarehouseTransactionPlugin\" `",
			"--Stage \"Pre-validation\" `",
			"--SolutionRootPath \"Declarations\" `",
			"--SdkMessage \"Create\" `",
			"--AssemblyId \"$$assemblyGuidId\" `",
			"--FilteringAttributes \"{${${1:publisherPrefix}}_itemid, ${${1:publisherPrefix}}_quantity}\" `",
			"--allow-scripts yes"
		]
	},
	"Link plugin project to Dataverse solution for live development": {
		"scope": "powershell",
		"prefix": "CFI07-link-plugin-solution",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║       CFI07: Link plugin project to Dataverse solution for live plugin development     ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script links the Plugins.Warehouse plugin project to the Dataverse solution project",
			"# so that any changes made to the plugin code can be included in the solution package.",
			"#",
			"# You can run this anytime you add, remove, or refactor plugin logic. It keeps the",
			"# Dataverse solution (cdsproj) up-to-date with project references.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"cd src/Solutions.Logic",
			"",
			"# Step 1: Sync the Dataverse solution project to ensure .cdsproj is ready",
			"pac solution sync --solution-folder Declarations",
			"",
			"# Step 2: Add reference to the plugin project",
			"pac solution add-reference --path ../Plugins.Warehouse/Plugins.Warehouse.csproj",
			"",
			"cd ../..",
		]
	}
}