{
	"Create pipeline source files": {
		"scope": "powershell",
		"prefix": "CFE01-create-pipeline-files",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFE01: Create Azure DevOps pipeline source YAML files                ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# We will create two Azure DevOps pipeline files. One for building artifacts from the source,",
			"# and the second for deploying packages. These YAML definitions can be stored alongside your",
			"# code in the repository, synced to the remote repository and then used to create pipelines",
			"# using the Azure CLI.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Sync main and create a new branch for introducing pipeline definitions",
			"git checkout main",
			"git pull origin main",
			"git checkout -b \"$$userBranchPrefix${1:/add-pipelines}\"",
			"",
			"# Step 2: Create a 'pipelines' directory to store pipeline YAML files",
			"New-Item -ItemType Directory -Path \"pipelines\"",
			"",
			"# Step 3: Create files for the build and deployment pipelines",
			"\"# type CFE02 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"pipelines/build.yml\"",
			"\"# type CFE03 and then press control+space to trigger suggestions of snippets, update project and definition variables\" `",
			"| Out-File -FilePath \"pipelines/deploy.yml\"",
			"\"# type CFE04 and then press control+space to trigger suggestions of snippets\" | Out-File -FilePath \"pipelines/test.yml\"",
			"",
			"# Step 4: Open the files in your editor to add the pipeline definitions (CFE02, CFE03 and CFE04)",
			"#         Suggestions for conde snippets can be triggered by control + space",
			"code \"pipelines/build.yml\"",
			"code \"pipelines/deploy.yml\"",
			"code \"pipelines/test.yml\"",
			"",
			"",
			"# Continue with snippet CFE05 after initializing pipeline files to create a pull request.",
		]
	},
	"Build pipeline template": {
		"scope": "yaml",
		"prefix": "CFE02-build-pipeline-template",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║    CFE02: Template of a build pipeline template for building artifacts from source     ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"",
			"# Versioning the pipeline output with date and revision number",
			"name: 0.0.1\\$(Date:yyMM).\\$(Rev:r)",
			"",
			"# This pipeline does not trigger automatically (triggered manually or by another pipeline)",
			"trigger: none",
			"",
			"# Using the 'windows-latest' virtual machine image to run the pipeline",
			"pool:",
			"\tvmImage: 'windows-latest'",
			"",
			"# Defining the steps to be executed in this pipeline",
			"steps:",
			"",
			"# Step 1: Use the .NET CLI to publish the project in Release configuration",
			"- task: DotNetCoreCLI@2",
			"\tinputs:",
			"\t\tcommand: 'publish'",
			"\t\tpublishWebProjects: false",
			"\t\tprojects: 'src/Packages.Main/Packages.Main.csproj'",
			"\t\targuments: '--configuration Release'",
			"\t\tzipAfterPublish: false",
			"",
			"# Step 2: Copy the published .pdpkg.zip files to the staging directory",
			"- task: CopyFiles@2",
			"\tinputs:",
			"\t\tSourceFolder: '\\$(Build.Repository.LocalPath)\\src\\'",
			"\t\tContents: '**\\*.pdpkg.zip'",
			"\t\tTargetFolder: '\\$(build.artifactstagingdirectory)\\Packages'",
			"\t\tflattenFolders: true",
			"",
			"# Step 3: Publish the build artifacts (the .zip files) to the artifact staging directory",
			"- task: PublishBuildArtifacts@1",
			"\tinputs:",
			"\t\tPathtoPublish: '\\$(Build.ArtifactStagingDirectory)'",
			"\t\tArtifactName: 'drop'",
			"\t\tpublishLocation: 'Container'",
			""
		]
	},
	"Deployment pipeline template": {
		"scope": "yaml",
		"prefix": "CFE03-deployment-pipeline-template",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║     CFE03: Template of a deployment pipeline for deploying packages to environment     ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"",
			"# Versioning the pipeline output with date and revision number",
			"name: 0.0.1\\$(Date:yyMM).\\$(Rev:r)",
			"",
			"# This pipeline does not trigger automatically (triggered manually or by another pipeline)",
			"trigger: none",
			"",
			"# Using the 'windows-latest' virtual machine image to run the pipeline",
			"pool:",
			"\tvmImage: 'windows-latest'",
			"",
			"# Defining the steps to download artifacts and deploy the package",
			"steps:",
			"",
			"# Step 1: Download the build artifacts from a specific build pipeline",
			"- task: DownloadPipelineArtifact@2",
			"\tinputs:",
			"\t\tbuildType: 'specific'",
			"\t\tproject: 'PROJECT_ID_PLACEHOLDER' # Update with your project ID",
			"\t\tdefinition: 'BUILD_PIPELINE_ID_PLACEHOLDER' # Update with your build pipeline ID",
			"\t\tbuildVersionToDownload: 'latestFromBranch'",
			"\t\tbranchName: 'refs/heads/main'",
			"\t\titemPattern: 'drop/Packages/**.pdpkg.zip'",
			"\t\ttargetPath: '\\$(Pipeline.Workspace)'",
			"",
			"# Step 2: Install the Power Platform CLI tool if not already installed",
			"- task: PowerPlatformToolInstaller@2",
			"\tinputs:",
			"\t\tDefaultVersion: true",
			"",
			"# Step 3: Deploy the package to the specified Dataverse environment",
			"- task: PowerPlatformDeployPackage@2",
			"\tinputs:",
			"\t\tauthenticationType: 'PowerPlatformSPN'",
			"\t\tPowerPlatformSPN: 'SERVICE_CONNECTION_NAME_PLACEHOLDER' # Update with your service principal name",
			"\t\tEnvironment: 'ENVIRONMENT_URL_PLACEHOLDER' # Update with your environment URL",
			"\t\tPackageFile: '\\$(Pipeline.Workspace)/drop/Packages/Packages.Main.1.0.0.pdpkg.zip'",
			""
		]
	},
	"Test pipeline template": {
		"scope": "yaml",
		"prefix": "CFE04-test-pipeline-template",
		"body": [
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFE04: YAML pipeline for restoring, building and running UI tests         ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This YAML pipeline automates the process of running UI tests for a .NET Core application.",
			"# It is designed to be used in a CI/CD system like Azure DevOps or GitHub Actions.",
			"# The pipeline performs the following key tasks:",
			"#   1. Installs the .NET SDK to ensure the environment can build and test the application.",
			"#   2. Updates Google Chrome to the latest version for UI testing  with Selenium.",
			"#   3. Configures environment variables for test user credentials and runs the UI tests.",
			"#",
			"name: Run UI Tests",
			"",
			"trigger: none",
			"",
			"pool:",
			"  vmImage: 'windows-latest'",
			"",
			"steps:",
			"",
			"- task: UseDotNet@2",
			"  inputs:",
			"    packageType: 'sdk'",
			"    version: '8.x'",
			"  displayName: 'Install .NET 8 SDK'",
			"",
			"- task: PowerShell@2",
			"  displayName: 'Update Chrome'",
			"  inputs:",
			"    targetType: 'inline'",
			"    script: |",
			"      $chromeInstaller = \"chrome_installer.exe\"",
			"      Invoke-WebRequest -Uri \"https://dl.google.com/chrome/install/latest/chrome_installer.exe\" -OutFile $chromeInstaller",
			"      Start-Process -FilePath $chromeInstaller -ArgumentList \"/silent\", \"/install\" -NoNewWindow -Wait",
			"      Remove-Item -Path $chromeInstaller",
			"",
			"- task: PowerShell@2",
			"  displayName: 'Run UI tests'",
			"  inputs:",
			"    targetType: 'inline'",
			"    script: |",
			"      $env:Users__0__Username = '$(UserName)'",
			"      $env:Users__0__Password = '$(UserPassword)'",
			"      $env:Users__0__Alias = '$(UserAlias)'",
			"      $env:Users__0__OtpToken = '$(UserOtpToken)'",
			"",
			"      dotnet test"
		],
		"description": "YAML pipeline snippet for running UI tests with .NET Core"
	},
	"Create a pull request to integrate pipelines into the main branch": {
		"scope": "powershell",
		"prefix": "CFE05-create-pipelines-pull-request",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║         CFE05: Create a pull request to integrate pipelines into the main branch       ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Step 1: Add all the changes to the staging area",
			"git add --all",
			"",
			"# Step 2: Commit the changes with a descriptive message",
			"git commit -m \"${1:chore: created build and deployment pipeline YAML files}\"",
			"",
			"# Step 3: Push the changes to the remote repository",
			"git push -u origin --all",
			"",
			"# Step 4: Wait for a few seconds to ensure the changes are pushed",
			"Start-Sleep -Seconds 5",
			"",
			"# Step 5: Create a pull request in Azure DevOps using the Azure CLI and open it in a browser",
			"$$pullRequest = az repos pr create `",
			"--source-branch \"$$userBranchPrefix${3:/add-pipelines}\" `",
			"--target-branch \"${4:main}\" `",
			"--title \"${5:chore: Add build, deployment and test pipelines}\" `",
			"--description \"${6:Initialization pipelines}\" `",
			"--delete-source-branch true `",
			"--auto-complete true `",
			"--project $$adoProjectName `",
			"--repository $$adoRepositoryName `",
			"| ConvertFrom-Json",
			"",
			"# Step 6: Approve the pull request if you have not done so already in the Azure DevOps web interface",
			"az repos pr set-vote `",
			"--id $$pullRequest.pullRequestId `",
			"--vote approve",
			"",
			"# Step 7: Wait before checking out the main branch to ensure the pull request is merged",
			"Start-Sleep -Seconds 15",
			"",
			"# Step 8: Checkout the main branch and pull the latest changes from the remote",
			"git checkout main",
			"git pull origin main",
			"",
			"Write-Output \"CFE06\" | Set-Clipboard",
			"",
			"# Clear this file with Ctrl+A & Delete. Then type CFE06 and select the snippet to continue",
			"# with creating the pipelines in Azure DevOps from the YAML files.",
		]
	},
	"Create pipelines in Azure DevOps from the files": {
		"scope": "powershell",
		"prefix": "CFE06-create-pipelines-ado",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFE06: Create pipelines in Azure DevOps from the files               ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Once the pull request for the pipeline definitions has been merged into the main branch,",
			"# the next step is to create the pipelines in Azure DevOps. Azure Pipelines will read the",
			"# YAML definitions stored in your repository to configure build and deployment processes.",
			"#",
			"# You will use the Azure CLI to create these pipelines. The command references the YAML files",
			"# in the repository and configures the pipelines without running them immediately (skipping",
			"# the first run).",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the build pipeline.",
			"if (-not \\$buildPipelineId) {",
			"    \\$buildPipelineCreateOutput = az pipelines create `",
			"    --name \"${1:Build} Pipeline\" `",
			"    --project \"\\$adoProjectName\" `",
			"    --repository \"\\$adoRepositoryName\" `",
			"    --repository-type tfsgit `",
			"    --branch \"${4:main}\" `",
			"    --yaml-path \"pipelines/build.yml\" `",
			"    --skip-first-run",
			"    ",
			"    \\$buildPipelineId = (\\$buildPipelineCreateOutput | ConvertFrom-Json).id",
			"}",
			"",
			"# Save build pipeline ID for persistence across terminal sessions",
			"Save-DemoVariables -Names \"buildPipelineId\"",
			"",
			"# Step 2: Create the deployment pipeline.",
			"az pipelines create `",
			"--name \"${2:Deploy} Pipeline\" `",
			"--project \"\\$adoProjectName\" `",
			"--repository \"\\$adoRepositoryName\" `",
			"--repository-type tfsgit `",
			"--branch \"${4:main}\" `",
			"--yaml-path \"pipelines/deploy.yml\" `",
			"--skip-first-run",
			"",
			"# Step 3: Create the test pipeline.",
			"az pipelines create `",
			"--name \"${3:Test} Pipeline\" `",
			"--project \"\\$adoProjectName\" `",
			"--repository \"\\$adoRepositoryName\" `",
			"--repository-type tfsgit `",
			"--branch \"${4:main}\" `",
			"--yaml-path \"pipelines/test.yml\" `",
			"--skip-first-run",
			"",
			"Write-Output \"CFE07\" | Set-Clipboard",
			"",
			"# Clear this file with Ctrl+A & Delete. Then type CFE07 and select the snippet to continue",
			"# with updating placeholders in the pipeline YAML file.",
		]
	},
	"Update project and build pipeline ID in the deploy pipeline YAML": {
		"scope": "powershell",
		"prefix": "CFE07-update-project-build-id",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║              CFE07: Update project and build pipeline ID in deploy pipeline            ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# After the project and build pipeline were created, the pipeline YAML definitions should be",
			"# updated with the corresponding project ID and build pipeline ID.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Set variables",
			"if (-not \\$projectId) {",
			"    \\$projectInfo = az devops project show --project \"\\$adoProjectName\" --query \"{id: id, name: name}\" --output json | ConvertFrom-Json",
			"    \\$projectId = \\$projectInfo.id",
			"    \\$adoProjectName = \\$projectInfo.name",
			"}",
			"if (-not \\$tenantId) {",
			"    \\$tenantId = az account show --query \"tenantId\" --output tsv",
			"}",
			"if (-not \\$adoOrgId) {",
			"    \\$adoAccessToken = az account get-access-token --resource https://app.vssps.visualstudio.com --query accessToken --output tsv",
			"    \\$adoOrgId = (Invoke-RestMethod -Uri \"https://dev.azure.com/\\$adoOrgName/_apis/connectionData?api-version=7.0-preview\" -Method Get -Headers @{",
			"        \"Authorization\"     = \"Bearer \\$adoAccessToken\"",
			"    }).instanceId",
			"}",
			"",
			"# Save project and organization variables for persistence across terminal sessions",
			"Save-DemoVariables -Names \"projectId\", \"tenantId\", \"adoOrgId\"",
			"",
			"# Step 2: Create a new branch for updating the deploy pipeline",
			"git checkout -b \"$$userBranchPrefix${1:/update-deploy-pipeline}\"",
			"",
			"# Step 3: Replace placeholders in the deploy pipeline YAML file with the actual project and build pipeline IDs.",
			"\\$deployPipelineFilePath = \"./pipelines/deploy.yml\"",
			"",
			"# Update the YAML file with the project ID",
			"(Get-Content \\$deployPipelineFilePath) -replace 'PROJECT_ID_PLACEHOLDER', \\$projectId | Set-Content \\$deployPipelineFilePath",
			"",
			"# Update the YAML file with the build pipeline ID",
			"(Get-Content \\$deployPipelineFilePath) -replace 'BUILD_PIPELINE_ID_PLACEHOLDER', \\$buildPipelineId | Set-Content \\$deployPipelineFilePath",
			"",
			"# Update the YAML file with the environment URL",
			"(Get-Content \\$deployPipelineFilePath) -replace 'ENVIRONMENT_URL_PLACEHOLDER', \\$uatEnvUrl | Set-Content \\$deployPipelineFilePath",
			"",
			"# Update the YAML file with the service connection name",
			"(Get-Content \\$deployPipelineFilePath) -replace 'SERVICE_CONNECTION_NAME_PLACEHOLDER', \\$adoServiceConnectionName | Set-Content \\$deployPipelineFilePath",
			"",
			"# Step 4: Commit and push the changes",
			"git add --all",
			"git commit -m \"chore: updated project and build pipeline IDs in deploy pipeline\"",
			"git push -u origin \"$$userBranchPrefix${1:/update-deploy-pipeline}\"",
			"",
			"# Step 5: Wait before creating the pull request to ensure the changes are pushed",
			"Start-Sleep -Seconds 5",
			"",
			"# Step 6: Create a pull request in Azure DevOps using the Azure CLI and open it in a browser",
			"$$pullRequest = az repos pr create `",
			"--source-branch \"$$userBranchPrefix${1:/update-deploy-pipeline}\" `",
			"--target-branch \"${2:main}\" `",
			"--title \"${3:chore: update project and build pipeline IDs in deploy pipeline}\" `",
			"--description \"${4:Update the project and build pipeline IDs in the deploy pipeline YAML file.}\" `",
			"--delete-source-branch true `",
			"--auto-complete true `",
			"--project $$adoProjectName `",
			"--repository $$adoRepositoryName `",
			"| ConvertFrom-Json",
			"",
			"# Step 7: Approve the pull request if you have not done so already in the Azure DevOps web interface",
			"az repos pr set-vote `",
			"--id $$pullRequest.pullRequestId `",
			"--vote approve",
			"",
			"# Step 8: Wait before checking out the main branch to ensure the pull request is merged",
			"Start-Sleep -Seconds 15",
			"",
			"# Step 9: Checkout the main branch and pull the latest changes from the remote",
			"git checkout main",
			"git pull origin main",
			"",
			"Write-Output \"CFE08\" | Set-Clipboard",
			"",
			"# Clear this file with Ctrl+A & Delete. Then type CFE08 and select the snippet to continue",
			"# with adding federated credential to the deployment service principal.",
		]
	},
	"Add federated credential to the deployment service principal": {
		"scope": "powershell",
		"prefix": "CFE08-add-federated-credential",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║             CFE08: Add federated credential to the deployment service principal        ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Workload identity federation allows you to authenticate as an app (service principal) using",
			"# tokens issued by Azure DevOps",
			"#",
			"# This removes the need for app secret/certificate handling a dealing with long-lived credentials.",
			"# A trust is established between Azure DevOps and an Azure service principal",
			"#",
			"# This snippet adds federated credential to the service principal we configured previously",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Set up workload identity federation in Entra ID.",
			"\\$federatedCredentialObject = @\"",
			"{",
			"    \"name\": \"ADOTest\",",
			"    \"issuer\": \"https://vstoken.dev.azure.com/\\$adoOrgId\",",
			"    \"subject\": \"sc://\\$adoOrgName/\\$adoProjectName/\\$adoServiceConnectionName\",",
			"    \"description\": \"Azure DevOps Service Connection\",",
			"    \"audiences\": [",
			"        \"api://AzureADTokenExchange\"",
			"    ]",
			"}",
			"\"@",
			"",
			"# Create a temporary file to store the federated credential object",
			"\\$federatedCredentialTempFile = New-TemporaryFile",
			"Set-Content -Path \\$federatedCredentialTempFile -Value \\$federatedCredentialObject -Encoding UTF8",
			"",
			"az ad app federated-credential create --id \\$deploymentServicePrincipal.appId --parameters @\\$federatedCredentialTempFile",
			"",
			"Remove-Item \\$federatedCredentialTempFile",
			"",
			"# Step 2: Open the application in the browser to manage credentials.",
			"\\$appRegistrationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Credentials/appId/\\$(\\$deploymentServicePrincipal.appId)/isMSAApp~/false\"",
			"Start-Process \\$appRegistrationUrl",
			"",
			"Write-Output \"CFE09\" | Set-Clipboard",
			"",
			"# Clear this file with Ctrl+A & Delete. Then type CFE09 and select the snippet to continue",
			"# with creating a service connection in Azure DevOps.",
			
		]
	},
	"Create a service connection in Azure DevOps": {
		"scope": "powershell",
		"prefix": "CFE09-create-service-connection",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                       CFE09: Create a service connection in Azure DevOps               ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This snippet creates a service connection in Azure DevOps that allows the pipeline tasks",
			"# to authenticate against Dataverse using the service principal created in the previous step.",
			"#",
			"# The service connection is configured to use workload identity federation,",
			"# which means it will use the federated credential created in the previous step to authenticate.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"",
			"# Step 1: Create a service connection object in Azure DevOps",
			"\\$serviceEndpointObject = @\"",
			"{",
			"    \"authorization\": {",
			"        \"parameters\": {",
			"            \"serviceprincipalid\": \"\\$(\\$deploymentServicePrincipal.appId)\",",
			"            \"tenantid\": \"\\$tenantId\"",
			"        },",
			"        \"scheme\": \"WorkloadIdentityFederation\"",
			"    },",
			"    \"name\": \"\\$adoServiceConnectionName\",",
			"    \"owner\": \"library\",",
			"    \"type\": \"powerplatform-spn\",",
			"    \"url\": \"\\$uatEnvUrl\",",
			"    \"serviceEndpointProjectReferences\": [",
			"        {",
			"            \"name\": \"\\$adoServiceConnectionName\",",
			"            \"projectReference\": {",
			"                \"id\": \"\\$projectId\",",
			"                \"name\": \"\\$adoProjectName\"",
			"            }",
			"        }",
			"    ]",
			"}",
			"\"@",
			"",
			"# Create a temporary file to store the service endpoint configuration",
			"\\$serviceEndpointTempFile = New-TemporaryFile",
			"[System.IO.File]::WriteAllText(\\$serviceEndpointTempFile, \\$serviceEndpointObject, (New-Object System.Text.UTF8Encoding \\$false))",
			"",
			"az devops service-endpoint create --service-endpoint-configuration \\$serviceEndpointTempFile --project \"\\$adoProjectName\"",
			"",
			"Remove-Item \\$serviceEndpointTempFile",
			"",
			"# Step 2: Grant access to all pipelines for the service connection",
			"if (-not \\$serviceEndpointId) {",
			"    \\$serviceEndpointId = az devops service-endpoint list --query \"[?name=='\\$adoServiceConnectionName'].id\" -o tsv --project \"\\$adoProjectName\"",
			"}",
			"if (\\$serviceEndpointId) {",
			"    az devops service-endpoint update --id \\$serviceEndpointId --enable-for-all --project \"\\$adoProjectName\"",
			"}",
			"",
			"# Step 3: Open the Azure DevOps project in the browser to review the service connection",
			"Start-Process \"https://dev.azure.com/\\$adoOrgName/\\$adoProjectName/_settings/adminservices?resourceId=\\$serviceEndpointId\"",
			"",
			"# Save service endpoint ID for persistence across terminal sessions",
			"Save-DemoVariables -Names \"serviceEndpointId\"",
			"",
			"Write-Output \"CFF01\" | Set-Clipboard",
			"",
			"# Clear this file with Ctrl+A & Delete. Then type CFF01 and select the snippet to continue",
			"# with implementing the data model.",
		]
	}
}