{
	"Power Platform Repository Demo Script Intro": {
		"scope": "powershell",
		"prefix": "CFA01-machine-setup",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                   CFA01: Power Platform Repository Demo Script Intro                   ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This is a demo script to show how to set up a new repository for a Power Platform project.",
			"# Many of the steps are usually carried out in IDE or web browser, but for the sake of",
			"# the demo, we'll try to use the command line as much as possible to explain the process.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Prerequisites",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# 1. Install Visual Studio Code (VS Code) from https://code.visualstudio.com/",
			"",
			"# 2. Install the .NET SDK",
			"# https://dotnet.microsoft.com/en-us/download",
			"",
			"# 3. Install dotnet-script tool because it is used by some templates.",
			"",
			"dotnet tool install --global \"dotnet-script\"",
			"",
			"# 4. Install PowerShell (macOS) since this demo and tools are using PowerShell scripts.",
			"dotnet tool install --global \"PowerShell\"",
			"",
			"# 5. Install PowerShell VS Code extension:",
			"# Open extension page from https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell",
			"",
			"# 6. Instal Cucumber VS Code extenstion for Gherkin test authoring:",
			"# Open extension page from https://marketplace.visualstudio.com/items?itemName=CucumberOpen.cucumber-official",
			"",
			"# 7. Install the TALXIS.DevKit.Templates.Dataverse NuGet package, which contains",
			"#         templates for creating common Power Platform components.",
			" dotnet new install TALXIS.DevKit.Templates.Dataverse",
			"",
			"# 8. If you haven't used Git before, you need to install it and set your user name and email.",
			"# Download installation from https://git-scm.com/downloads",
			"git config --global user.name \"${2:Tomas Prokop}\"",
			"git config --global user.email \"${3:tomas.prokop@REDACTED.org}\"",
			"",
			"# 9. Configure NuGet to use the public package feed (might be already done by the SDK install)",
			"dotnet nuget add source \"https://api.nuget.org/v3/index.json\" -n \"nuget.org\"",
			"",
			"# 10. Install Azure CLI. More info: aka.ms/azcli-docs",
			"# Windows:",
			"winget install -e --id \"Microsoft.AzureCLI\"",
			"# macOS:",
			"brew install azure-cli",
			"",
			"# 11. Install Azure DevOps CLI extension",
			"az extension add --name \"azure-devops\"",
			"",
			"# 12. Install Power Platform CLI (pac). More info: https://aka.ms/PowerPlatformCLI",
			"# A) RECOMMENDED OPTION: Install with Windows MSI (Windows only)",
			"# https://aka.ms/PowerAppsCLI",
			"# ",
			"# B) Install with .NET Tool (modern cross-platform CLI which doesn't support Package Deployer and Configuration Migration Tool yet)",
			"dotnet tool install --global \"Microsoft.PowerApps.CLI.Tool\"",
			"#",
			"# C) Install the Visual Studio Code extension (available in VS Code terminal)",
			"# https://marketplace.visualstudio.com/items?itemName=microsoft-IsvExpTools.powerplatform-vscode",
			"",
			"# 12. Clear this file with Ctrl+A & Delete. Then type CFA02 and select the snippet to continue."
		]
	},
	"Define constant variables": {
		"scope": "powershell",
		"prefix": "CFA02-constant-variables",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                            CFA02: Define constant variables                            ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This snippet defines constant variables that are used throughout the demo script.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# User branch prefix",
			"\\$userBranchPrefix = \"${1:users/tomas.prokop}\"",
			"",
			"# Power Platform environments",
			"# IMPORTANT: In case of an environment domain name clash, the platform generates a random one",
			"# To avoid this, please replace the \"1234\" at the end of the domain with a random 4 digit number",
			"\\$devEnvDomain = \"${5:inventorymgmtdev01}-1234\"",
			"\\$devEnvAuthProfileName = \"${1:InventoryManagementDEV}\"",
			"\\$devEnvUrl = \"https://\\$devEnvDomain.crm4.dynamics.com/\"",
			"",
			"# IMPORTANT: In case of an environment domain name clash, the platform generates a random one",
			"# To avoid this, please replace the \"1234\" at the end of the domain with a random 4 digit number",
			"\\$uatEnvDomain = \"${5:inventorymgmtuat}-1234\"",
			"\\$uatEnvAuthProfileName = \"${2:InventoryManagementUAT}\"",
			"\\$uatEnvUrl = \"https://\\$uatEnvDomain.crm4.dynamics.com/\"",
			"",
			"# Azure DevOps instance, project and identity",
			"\\$tenantDomain = \"${2:ngtraining1.onmicrosoft.com}\"",
			"\\$adoOrgName = \"${3:ngtraining1.onmicrosoft}\"",
			"\\$adoProjectName = \"${4:DemoInventoryManagement}\"",
			"\\$adoRepositoryName = \"${5:DemoInventoryManagement}\"",
			"\\$adoServiceConnectionName = \"${6:InventoryManagementServiceConnection}\"",
			"\\$deploymentServicePrincipalRole = \"${2:System Administrator}\"",
			"",
			"# Power Platform components",
			"\\$publisherPrefix = \"${8:udpp}\"",
			"",
			"# Test automation",
			"\\$testUserName = \"${1:int0022-testing_demo.talxis.com#EXT#@ngtraining1.onmicrosoft.com}\"",
			"\\$testUserRole = \"${2:System Administrator}\"",
			"\\$testServicePrincipalRole = \"${2:System Administrator}\"",
			"",
			"# Clear this file with Ctrl+A & Delete. Then type CFA03 and select the snippet to continue."
		]
	},
	"Authenticate CLI tools": {
		"scope": "powershell",
		"prefix": "CFA03-authenticate-cli",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                          CFA03: Authenticate local CLI tools                           ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Before working with the development environment and remote servers using the CLI, ",
			"# it's a good practice to clear any existing authentication profiles. This helps prevent",
			"# accidental communication with the wrong environment and ensures that all subsequent commands",
			"# are executed in the correct context. The following command clears the current authentication",
			"# profile and establishes a new connection.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"",
			"# Step 1: Clear any existing authentication profiles of PAC CLI and Azure CLI",
			"pac auth clear",
			"az account clear",
			"",
			"# Step 2: Log in to the Power Platform CLI using your organizational account.",
			"# Note: when there is no environment specified, the CLI will use the default environment",
			"pac auth create",
			"",
			"# Step 3: Log in to Azure CLI using your organizational account",
			"# Note: to skip subscriptions selection, you can set the following configuration",
			"az config set core.login_experience_v2=off",
			"",
			"a $$tenantDomain",
			"",
			"# Step 4: Set Azure DevOps CLI defaults",
			"az devops configure --defaults \"organization=https://dev.azure.com/\\$adoOrgName project=\\$adoProjectName\"",
			"",
			"# Clear this file with Ctrl+A & Delete. Then type CFA04 and select the snippet to continue."
		]
	},
	"Load existing resources if not starting from scratch": {
		"scope": "powershell",
		"prefix": "CFA04-load-existing-resources",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║               CFA04: Load existing resources if not starting from scratch              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# ",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"",
			"# If you have already set up the resources, skip this step by pressing Ctrl+A & Delete",
			"# and then type CFA05 and select the snippet to continue.",
			"",
			"# Step 1: Check if Power Platform environments already exist (without admin privileges)",
			"\\$devEnvExists = \\$false",
			"\\$uatEnvExists = \\$false",
			"try { [System.Net.Dns]::GetHostAddresses(\"(\\$devEnvUrl -replace '^https?://')\") | Out-Null; \\$envExists = \\$true } catch {}",
			"try { [System.Net.Dns]::GetHostAddresses(\"(\\$uatEnvUrl -replace '^https?://')\") | Out-Null; \\$envExists = \\$true } catch {}",
			"",
			"# Step 2: Check if Azure DevOps project already exists",
			"\\$adoProjectExists = \\$false",
			"try { az devops project show --project \"\\$adoProjectName\" --output none; \\$adoProjectExists = \\$true } catch {}",
			"",
			"# Clear this file with Ctrl+A & Delete. Then type CFB01 and select the snippet to continue."
		]
	}
}