{
	"Create a project with UI tests": {
		"scope": "powershell",
		"prefix": "CFM01-create-ui-tests",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                          CFM01: Create a project for UI tests                          ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script creates an application in which you can write tests in the Gherkin language. ",
			"# When creating this application from template, you can automatically initialize user secrets,  ",
			"# connect the FluentAssertions library,   ",
			"# choose a framework to test your application (MStest, NUnit, XUnit )    ",
			"# and generate appsetings.json to configure your tests    ",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#",
			"# Step 1: Create project from template",
			"#",
			"dotnet new pp-test-ui `",
			"--output \"src/Tests.UI\" `",
			"--CreateAppsetingsFile true `",
			"--EnableUserSecrets true `",
			"--TestExecutionFramework \"mstest\" `",
			"--IncludeFluentAssertions true `",
			"--allow-scripts yes",
			"#",
			"# Step 2: Add .feature file to project",
			"dotnet new pp-test-ui-feature `",
			"--output \"src\\Tests.UI\" ",
			"#",
			"dotnet sln add src/Tests.UI"
		]
	},
	"Background: Login to app": {
		"scope": "cucumber",
		"prefix": "CFM02-subtract-stock-to-available-quantity  ",
		"body": [
			"# ╔══════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                      Feature: Subtract Stock from Available Quantity                 ║",
			"# ╚══════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This Gherkin scenario tests subtract item from the Available Quantity of an item after",
			"# creating a Warehouse Transaction.",
			"#",
			"# It verifies that the 'Available Quantity' is recalculated correctly after an",
			"# inbound transaction is subtracted.",
			"#",
			"# ────────────────────────────────────────────────────────────────────────────────────────",
			"# Background setup: login and item creation",
			"Feature: Subtract Stock",
			"",
			"  Background:",
			"    Given I am logged in to the 'Inventory Management' app as 'a Warehouse Manager'",
			"    And I have created 'a printer warehouse item of quantity 5'",
			"",
			"# ────────────────────────────────────────────────────────────────────────────────────────",
			"# Scenario: Performing the transaction and verifying available quantity",
			"  Scenario: Subtract Stock to Available Quantity",
			"",
			"    When I open the 'Warehouse Transactions' sub area of the 'New Group' group",
			"    And I select the 'New' command",
			"    And I enter the following into the form",
			"      | Value   | Field    |",
			"      | Inbound | Name     |",
			"      | Printer | Item     |",
			"      | 5       | Quantity |",
			"    And I save the record",
			"    And I select a related 'Item' lookup field",
			"    Then I should be able to see a value of '0' in the 'Available Quantity' field"
		],
		"description": "Reusable background for logging into the Warehouse App"
	},
	"Scenario: Not Enough Product In Stock": {
		"scope": "cucumber",
		"prefix": "CFM03-error-not-enough-stock",
		"body": [
			"# ╔══════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                  Feature: Error Handling for Warehouse Transactions                  ║",
			"# ╚══════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This Gherkin scenario tests error handling when attempting to create a Warehouse",
			"# Transaction with a requested quantity that exceeds available stock.",
			"#",
			"# It verifies that a proper error message is shown to the user.",
			"#",
			"# ────────────────────────────────────────────────────────────────────────────────────────",
			"# Scenario: Creating a transaction with quantity greater than stock",
			"Feature: Error Validation - Not Enough Stock",
			"",
			"  Background:",
			"    Given I am logged in to the 'Inventory Management' app as 'a Warehouse Manager'",
			"    And I have created 'a printer warehouse item of quantity 5'",
			"",
			"  Scenario: Error Message for Insufficient Stock",
			"",
			"    When I open the 'Warehouse Transactions' sub area of the 'New Group' group",
			"    And I select the 'New' command",
			"    And I enter the following into the form",
			"      | Value             | Field    |",
			"      | Test Transaction | Name     |",
			"      | 10               | Quantity |",
			"      | Printer          | Item     |",
			"    And I save the record",
			"    Then an error dialog should be displayed with the text 'Not enough product in stock. Available: 5, requested: 10.'"
		],
		"description": "Scenario for testing stock validation and error messages"
	},
	"Setup ui test": {
		"scope": "powershell",
		"prefix": "CFM04-Setup-UI-tests",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                                   CFM03: Setup UI Test                                   ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Once we have uploaded the solution and published our application, we are ready to run tests.",
			"# This script guides you through the process of configuring and running UI tests for a .NET application.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Add the URL of your application to appsettings.json",
			"# Purpose: UI tests need to know the base URL of the deployed application (e.g., local or staging).",
			"# Instructions:",
			"#   a) Locate the 'appsettings.json' file in your test project folder (or create one if it doesn't exist).",
			"#   b) Add a section to specify the base URL of your application. Example:",
			"#      ```json",
			"#        \"AppSettings\": {",
			"#          \"Url\": \"https://YourApplicationURL\"",
			"#        }",
			"#",
			"#   d) Ensure the application is running and accessible at the specified URL during testing.",
			"",
			"# Step 2: Add testing user data to NuGet User Secrets",
			"# Purpose: Store sensitive test user credentials and persona information securely, outside of source code.",
			"# Instructions:",
			"#   a) Open a terminal in your test project folder.",
			"      cd .\\src\\Tests.UI",
			"",
			"#   b) Add test user data using the following commands:",
			"#",
			"      dotnet user-secrets set \"Users:0:Username\" \"int0022-testing@demo.talxis.com\"",
			"      dotnet user-secrets set \"Users:0:Password\" \"$$TestUserPassword\"",
			"#",
			"      dotnet user-secrets set \"Personas:0:Alias\" \"a Warehouse Manager\"",
			"      dotnet user-secrets set \"Personas:0:Username\" \"int0022-testing@demo.talxis.com\"",
			"      dotnet user-secrets set \"Personas:0:SecurityRoles:0\" \"979144c2-989b-41a5-a146-6b3ea4130e8c\"",
			"      dotnet user-secrets set \"Personas:0:SecurityRoles:1\" \"$$WarehouseManagerGuidId\"",
			"#",
			"      dotnet user-secrets set \"Personas:1:Alias\" \"a Warehouse Worker\"",
			"      dotnet user-secrets set \"Personas:1:Username\" \"int0022-testing@demo.talxis.com\"",
			"      dotnet user-secrets set \"Personas:1:SecurityRoles:0\" \"979144c2-989b-41a5-a146-6b3ea4130e8c\"",
			"      dotnet user-secrets set \"Personas:1:SecurityRoles:1\" \"$$WarehouseWorkerId\"",
			"#",
			"      dotnet user-secrets set \"applicationUser:TenantId\" $$testUserServicePrincipal.tenant",
			"      dotnet user-secrets set \"applicationUser:ClientId\" $$testUserServicePrincipal.appId",
			"      dotnet user-secrets set \"applicationUser:ClientSecret\" $$testUserServicePrincipal.password",
			"#",
			"#   c) Ensure these users and settings exist in the system under test and are configured properly.",
			"      cd .\\..\\..",
			"",
		]
	},
	"CreateWarehouseItemData": {
		"scope": "powershell",
		"prefix": "CFM05-create-warehouseitem-json",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                CFM10: Create sample warehouse item JSON file for testing               ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This script generates a sample JSON file that represents a warehouse item record in",
			"# Dataverse-style structure. Useful for test data or prototyping import logic.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"$$relativePath = \"src/Tests.UI/Data\"",
			"mkdir $$relativePath",
			"$$filename = \"a printer warehouse item of quantity 5.json\"",
			"$$path = Join-Path -Path (Resolve-Path -Relative $$relativePath) -ChildPath $$filename",
			"",
			"$$jsonObject = @{",
			"    \"@logicalName\" = \"${1:publisherPrefix}_warehouseitem\"",
			"    \"@alias\"       = \"the printer warehouse item of quantity 5\"",
			"    \"${1:publisherPrefix}_name\"     = \"Printer\"",
			"    \"${1:publisherPrefix}_availablequantity\" = 5",
			"}",
			"",
			"$$jsonContent = $$jsonObject | ConvertTo-Json -Depth 3",
			"Set-Content -Path $$path -Value $$jsonContent -Encoding UTF8",
			"",
		]
	},
	"Run dotnet test": {
		"scope": "powershell",
		"prefix": "CFM06-run-dotnet-test",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                                CFM04: Run dotnet test                                  ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# This command runs automated UI or integration tests in your .NET test project.",
			"# Make sure all dependencies are configured, including appsettings and user secrets.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Run the tests with dotnet test",
			"dotnet test `",
		]
	}
}