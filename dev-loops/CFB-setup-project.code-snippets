{
	"Initialize a new Git repository and create branches": {
		"scope": "powershell",
		"prefix": "CFB01-git-init",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                CFB01: Initialize a new Git repository and create branches              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# Git is a distributed version control system that allows multiple developers to work on",
			"# the same project simultaneously. It tracks changes in the codebase, allows for collaboration",
			"# and provides a history of changes.",
			"#",
			"# A branch is a parallel version of the codebase that allows developers to work on features",
			"# or bug fixes without affecting the main codebase. Branches can be created, merged and deleted.",
			"#",
			"# Power Platform projects based on Dataverse can be versioned in Git repositories thanks to",
			"# solutions framework which allows exporting and importing components.",
			"#",
			"# We will adopt a trunk-based branching strategy, where all developers collaborate on the main",
			"# branch, resisting the creation of long-lived development branches which lead to merge hells.",
			"#",
			"# The '${1:main}' branch will serve as the integration point for all work.",
			"# Each feature or bug fix will be implemented on short-lived topic branches.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Initialize the Git repository with '${1:main}' as the default branch",
			"git init -b \"${1:main}\"",
			"",
			"# Step 2: Create an empty README file and commit it to the main branch to initialize the repository",
			"New-Item -Path README.md -ItemType File",
			"git add README.md",
			"git commit -m \"Initial commit\"",
			"",
			"# Step 3: To fix a bug or implement a feature, a developer creates a short-lived",
			"#         new branch off the main integration branch.",
			"git checkout -b \"$$userBranchPrefix${2:/project-setup}\""
		]
	},
	"Create repository root files and folders": {
		"scope": "powershell",
		"prefix": "CFB02-create-repo-root-file-folders",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                    CFB02: Create repository root files and folders                     ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# A monorepo is a single repository that contains multiple projects, components or apps.",
			"# It's a simplified approach for components which are tightly integrated or frequently ",
			"# updated together.",
			"#",
			"# When repositories are split, the overhead of managing dependencies, versioning ",
			"# and artifact stores increases, which may not add value unless you're building reusable ",
			"# components for multiple customer projects. This reduces the complexity of coordinating ",
			"# dependent pull requests (PRs) and ensures that code reviews provide full context. ",
			"# Additionally, maintaining CI/CD pipelines is simpler, as orchestration is consolidated ",
			"# in one place instead of across multiple repositories.",
			"#",
			"# MSBuild and .NET project system helps to manage multiple projects in a single repository.",
			"# Visual Studio solution files (.sln) are used to keep track of the projects.",
			"#",
			"# A consistent folder structure in monorepos is essential because it keeps things simple ",
			"# and predictable. Without it, teams tend to isolate their projects in deep, nested directories,",
			"# which makes collaboration harder and code reuse less likely.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Generate a .gitignore file to exclude unnecessary files from being committed to Git.",
			"#         dotnet new template contains common rules for .NET projects.",
			"dotnet new gitignore",
			"",
			"# Step 2: Create a new Visual Studio solution file (not a Dataverse solution).",
			"dotnet new sln --name ${1:InventoryManagement}",
			"",
			"# Step 3: Create a `src` directory to hold the source code for your project(s).",
			"mkdir src",
			"",
			"# Step 4: For demonstration purposes, exclude the '.demo' and '.vscode' folders ",
			"#         from version control by adding it to `.gitignore`.",
			"Add-Content .gitignore \".demo/\"",
			"Add-Content .gitignore \".vscode/\"",
			"",
			"# Step 5: You can review the Source Control tab in VS Code to see changes you made",
		]
	},
	"Create a Dataverse package and add the solutions to it": {
		"scope": "powershell",
		"prefix": "CFB03-create-pdpackage",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║                           CFB03: Create a Dataverse Package                            ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# A Package Deployer Tool (PDT) package (PDPackage) in Dataverse is an artifact that allows ",
			"# you to bundle multiple Dataverse solutions, an ImportConfig.xml file, and custom .NET code ",
			"# to handle various stages of solution import. The package is used with the Package Deployer ",
			"# Tool to deploy multiple solutions with custom logic during deployment, such as data migrations, ",
			"# validations or post-deployment operations.",
			"#",
			"# The ImportConfig.xml file defines the order in which solutions are imported. It can also",
			"# contain how solution upgrade shoud be handled and execute import of configuration or test",
			"# data packages exported from environments with Configuration Migration Tool (CMT).",
			"#",
			"# The ImportConfig.xml can be automatically generated from the ProjectReferences ",
			"# of the PDPackage's .NET project using build targets. This ensures that the import process ",
			"# respects the correct dependencies.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Create the Dataverse package for deployment.",
			"pac package init --package-name ${1:Packages.Main} --outputDirectory \"src/${1:Packages.Main}\"",
			"cd \"src/${1:Packages.Main}\"",
			"",
			"# Step 2: Add the package project to the Visual Studio solution file.",
			"dotnet sln ../../ add ${1:Packages.Main}.csproj",
			"",
			"# Return to the root directory.",
			"cd ../.."
		]
	},
	"Commit the current changes to your local feature branch": {
		"scope": "powershell",
		"prefix": "CFB04-commit-initial-changes",
		"body": [
			"#",
			"# ╔════════════════════════════════════════════════════════════════════════════════════════╗",
			"# ║            CFB04: Commit the current changes to your local feature branch              ║",
			"# ╚════════════════════════════════════════════════════════════════════════════════════════╝",
			"#",
			"# In Git, a commit is a snapshot of the changes you've made to the code. It is a way to save",
			"# your progress and document what changes were made. Commits are stored in your local branch",
			"# and can be pushed to a remote repository for others to see.",
			"#",
			"# VS Code offers an easy way to see your Git changes. In the Source Control tab, you can view",
			"# modified files, new files, and deleted files. The color indicators help you quickly identify",
			"# which lines have been added, removed, or modified.",
			"#",
			"# After reviewing your changes, you need to 'stage' them (preparing them for a commit) using",
			"# the 'git add' command. Once staged, you create a commit with a message describing the changes.",
			"#",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"#                                        Commands",
			"# ──────────────────────────────────────────────────────────────────────────────────────────",
			"# Step 1: Review your changes in the Source Control tab of VS Code.",
			"",
			"# Step 2: Add all changes to the staging area.",
			"git add --all",
			"",
			"# Step 2: Commit the staged changes with a descriptive message.",
			"git commit -m \"${1:chore: Initialized repository and created a PD package}\"",
			"",
			"",
			"# Continue with the next module by typing CFC..."
		]
	},
}